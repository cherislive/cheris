{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/cheris/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/cheris/source/css/style-2.styl","path":"css/style-2.styl","modified":0,"renderable":1},{"_id":"themes/cheris/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/article.jpg","path":"images/article.jpg","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/icon-bubble.svg","path":"images/icon-bubble.svg","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/icon-categories.svg","path":"images/icon-categories.svg","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/icon-tags.svg","path":"images/icon-tags.svg","modified":0,"renderable":1},{"_id":"themes/cheris/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"e484ff478892e06c010f884335bb68800274d113","modified":1468390246000},{"_id":"themes/cheris/.gitignore","hash":"803c06a7086b5817c03d2e8672da27bc56ba2bce","modified":1466335298000},{"_id":"themes/cheris/_config.yml","hash":"77306731f9427994aef4d5a9a768f623399f50df","modified":1468387392000},{"_id":"source/.DS_Store","hash":"2479f26273ea07821e22188e6fc2b2d2acc2b602","modified":1468387997000},{"_id":"themes/cheris/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468388069000},{"_id":"source/_posts/30分钟git命令入门到放弃.md","hash":"b39c7326ee3dfd0937c27c1c3f1829bcc6b35d04","modified":1468302468000},{"_id":"source/_posts/The front-end web site to collect.md","hash":"793306257d132f67e777972e055b7866ed309247","modified":1468301498000},{"_id":"themes/cheris/languages/default.yml","hash":"4571e0216ed876cd8240ccbb92c9302688f82f5b","modified":1466335298000},{"_id":"themes/cheris/languages/zh-CN.yml","hash":"cbb421e575c3a50138bd3b26834b547d50627369","modified":1466335298000},{"_id":"themes/cheris/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1468317340000},{"_id":"themes/cheris/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1466335298000},{"_id":"themes/cheris/layout/index.ejs","hash":"daebbdce27bc42410a118a5d050ee62e6229989e","modified":1468305514000},{"_id":"themes/cheris/layout/layout.ejs","hash":"bb9586d19ad1a54e723ec9e38ca3f5aeea8c6373","modified":1468304236000},{"_id":"themes/cheris/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1468317328000},{"_id":"themes/cheris/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1468317320000},{"_id":"themes/cheris/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1466335298000},{"_id":"themes/cheris/source/favicon.ico","hash":"17cec2383d6442ab02f456dde75a598240dce259","modified":1468233716000},{"_id":"source/demo/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468388174000},{"_id":"themes/cheris/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468388195000},{"_id":"themes/cheris/layout/_partial/archive.ejs","hash":"126459fada101d7e7ff87864fb9c1013fc83534f","modified":1468319142000},{"_id":"themes/cheris/layout/_partial/article.ejs","hash":"4d5bfc39aee870813b99b972432c2b704798a484","modified":1468301370000},{"_id":"themes/cheris/layout/_partial/article_default.ejs","hash":"ed9b8277195c68e4c4a9e56601b43f0b42c1cc85","modified":1468305742000},{"_id":"themes/cheris/layout/_partial/article_index.ejs","hash":"271385ad10d7d69bc8d0b06f0841e30f83224fb4","modified":1468309610000},{"_id":"themes/cheris/layout/_partial/comment.ejs","hash":"9a0c64143935d20b68e48625d405251c9dd726ac","modified":1466335298000},{"_id":"themes/cheris/layout/_partial/footer.ejs","hash":"296b377fbc6959d15384ee186137108b56f4ca6a","modified":1468294520000},{"_id":"themes/cheris/layout/_partial/googleanalytics.ejs","hash":"fa11251ace0fc61cbcffb74f32fbf5bdbb201ff2","modified":1466335298000},{"_id":"themes/cheris/layout/_partial/head.ejs","hash":"b555339cf4c905d54143f1da020e22bb1edbf3d7","modified":1468291946000},{"_id":"themes/cheris/layout/_partial/header.ejs","hash":"aeb35cfb2bf431688f8ebe14fc18bac211912c19","modified":1468304410000},{"_id":"themes/cheris/layout/_partial/pagination.ejs","hash":"10a164fd96344c9879a42bf5ca0a44ac0b57c85c","modified":1468309060000},{"_id":"themes/cheris/source/css/style-2.styl","hash":"e85367592c7ee8fd9d784665091fd558c1d32150","modified":1468233206000},{"_id":"themes/cheris/source/css/style.styl","hash":"869334beeee1ae5d122b87376bff1516c038f56f","modified":1468249714000},{"_id":"themes/cheris/source/images/article.jpg","hash":"b1731429972273ad832fbc1337702de851f82181","modified":1468317926000},{"_id":"themes/cheris/source/images/avatar.png","hash":"2ca9ecd71c5eace855736bc60890028e994ce74d","modified":1468294822000},{"_id":"themes/cheris/source/images/icon-bubble.svg","hash":"705b667e317db9b6b572f6f4153d81991a3a69a7","modified":1466335298000},{"_id":"themes/cheris/source/images/icon-categories.svg","hash":"1740f4817c0126e259c12ddf38378026ab0bac29","modified":1466335298000},{"_id":"themes/cheris/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1466335298000},{"_id":"themes/cheris/source/images/icon-tags.svg","hash":"5f7af686d28f0d1015ae6f16559f9b9658f17dd1","modified":1466335298000},{"_id":"themes/cheris/source/images/logo.png","hash":"d65b650a670b87ba4bbaa48139d2a4489494dc79","modified":1468310230000},{"_id":"themes/cheris/layout/_partial/post/category.ejs","hash":"7df31e3d4ab40ea81f94ffa11f1b4f2a9ebc839d","modified":1468303270000},{"_id":"themes/cheris/layout/_partial/post/gallery.ejs","hash":"de577a884255f35fc14eecf3ff9a14a7d9c786be","modified":1466335298000},{"_id":"themes/cheris/layout/_partial/post/tag.ejs","hash":"0a426f56b90927397036c937bc5491b704e5e12a","modified":1468303238000},{"_id":"themes/cheris/layout/_partial/post/title.ejs","hash":"30bc79a4769933df1c1b770f5f3a2fde4e7f1ffa","modified":1468317250000},{"_id":"themes/cheris/source/css/_base/layout.css","hash":"63ced4a6a819ec70e6e86f5c188704ecceedfef8","modified":1466335298000},{"_id":"themes/cheris/source/css/_base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1466335298000},{"_id":"themes/cheris/source/css/_base/responsive.css","hash":"cf8e14de3ceb1214af47c80b1f5abfd1532e1073","modified":1466335298000},{"_id":"themes/cheris/source/css/_base/syntax.css","hash":"da87e8df35f5ce77cc0fd9ba89f95e8c533b3542","modified":1468232270000},{"_id":"themes/cheris/source/css/_base/style.css","hash":"a8f4ea6d41dac6a079aed33aad316424575d4674","modified":1468234944000},{"_id":"themes/cheris/source/css/_base/syntax.styl","hash":"36900cf4b58d2b01a512a875941ae73c8556d273","modified":1466335298000},{"_id":"themes/cheris/source/css/_base/utils.css","hash":"c4e3f6c77980755302e15066b7bd988c31f61e65","modified":1466335298000},{"_id":"themes/cheris/source/css/_cheris/base.css","hash":"cd2bd1afcdcf62afdeab02ab4c4260b6bc38c802","modified":1468375242000},{"_id":"themes/cheris/source/css/_cheris/highlight.css","hash":"64f739e5b2c47c7ceb4a4d6b4edf8bdef58b85ed","modified":1468290222000},{"_id":"themes/cheris/source/css/_cheris/style.css","hash":"0eeea77c6fe5ea3fa7ce7a8d5c81ca7e107eed68","modified":1468319442000},{"_id":"themes/cheris/source/css/_cheris/style_tmp.css","hash":"16a6e57e9af7d6a48ce38ccbf004db64250eab84","modified":1468306302000},{"_id":"themes/cheris/source/css/_partial/archive.css","hash":"73609280dbec6c0f8adbcfffd4fd94b5a6dd351e","modified":1466335298000},{"_id":"themes/cheris/source/css/_partial/article.css","hash":"c5b397d7ee68cb4f3e9287d4023dea0f6e35a661","modified":1466335298000},{"_id":"themes/cheris/source/css/_partial/footer.css","hash":"36c1fe0af13d550d41cbb7f754cc4989b917ce18","modified":1466335298000},{"_id":"themes/cheris/source/css/_partial/header.css","hash":"69828b0c639b4d1a3d631f135a925585b51c61dd","modified":1468228010000},{"_id":"themes/cheris/source/css/_partial/icon.css","hash":"5d8f9ef7ff45ceb179537ecb8ebef7103d72558a","modified":1466335298000},{"_id":"themes/cheris/source/css/_partial/media.css","hash":"386e605ffe9327dfe70230ff13af450ca7a9208f","modified":1466335298000},{"_id":"themes/cheris/source/css/_partial/pagination.css","hash":"6152eb2c019b497a86cc47946d449d9330a7d255","modified":1466335298000},{"_id":"public/2016/06/11/The front-end web site to collect/index.html","hash":"1626173e927ca3a3160511dfe1a7ab99ae295588","modified":1468396974668},{"_id":"public/archives/index.html","hash":"1ee30e2d7cd17f261ebcb316c1278ea89a88dc1f","modified":1468396974668},{"_id":"public/archives/2016/06/index.html","hash":"032e153898ba10994fa3cb0a5595b8c416f8fa55","modified":1468396974669},{"_id":"public/archives/2016/index.html","hash":"2207e230b05a389fdd813bc8f53bb2a784b85541","modified":1468396974669},{"_id":"public/archives/2016/07/index.html","hash":"93ca0978a6a0fcfa7f43724c6d6e84f09d813636","modified":1468396974669},{"_id":"public/categories/前端/index.html","hash":"9032b5a692464ce749ee1f1581e171d1e488960b","modified":1468396974669},{"_id":"public/index.html","hash":"4a5ef1a08807b3c74e9e524cf20cf60714398855","modified":1468396974669},{"_id":"public/tags/git/index.html","hash":"35ff5aebf320da0a129029cca7bb2406daae5ae3","modified":1468396974669},{"_id":"public/2016/07/11/30分钟git命令入门到放弃/index.html","hash":"4ddc00cd0d3bd945806d256dad1f48ae93495fbd","modified":1468396974669},{"_id":"public/README.md","hash":"e484ff478892e06c010f884335bb68800274d113","modified":1468396974671},{"_id":"public/favicon.ico","hash":"17cec2383d6442ab02f456dde75a598240dce259","modified":1468396974671},{"_id":"public/images/article.jpg","hash":"b1731429972273ad832fbc1337702de851f82181","modified":1468396974672},{"_id":"public/images/icon-bubble.svg","hash":"705b667e317db9b6b572f6f4153d81991a3a69a7","modified":1468396974672},{"_id":"public/images/avatar.png","hash":"2ca9ecd71c5eace855736bc60890028e994ce74d","modified":1468396974672},{"_id":"public/images/icon-categories.svg","hash":"1740f4817c0126e259c12ddf38378026ab0bac29","modified":1468396974672},{"_id":"public/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1468396974672},{"_id":"public/images/icon-tags.svg","hash":"5f7af686d28f0d1015ae6f16559f9b9658f17dd1","modified":1468396974672},{"_id":"public/images/logo.png","hash":"d65b650a670b87ba4bbaa48139d2a4489494dc79","modified":1468396974672},{"_id":"public/css/style.css","hash":"080ce3e795327100ef715ed5c17cd6d02fb5ba91","modified":1468396974894},{"_id":"public/css/style-2.css","hash":"fea4931e5182c66cbe1652aa59c0a44aa51abcc2","modified":1468396974894}],"Category":[{"name":"前端","_id":"ciqklmwup00035myvnjnjpy5f"}],"Data":[],"Page":[],"Post":[{"title":"Git 简单使用说明","date":"2016-07-11T09:09:08.000Z","_content":"git——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。 \n<!--more-->\n初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！\n![30分钟git命令入门到放弃](http://oa59b6bv6.bkt.clouddn.com/git1.webp)\n\n## learn-git\n\n### 基本了解\n\ngit命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。\n\nGit是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。\n\n\n1. 安装Git\n安装git非常直接：\n* Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：\n\n``` javascript\n$ sudo apt-get install git-all\n```\n\n* Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。\n\n* OS X - 最简单的方式是使用homebrew安装，命令行执行\n\n``` javascript\n$ brew install git\n```\n如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。\n\n2. 配置Git\n安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。\n\n``` javascript\n$ git config --global user.name \"My Name\"\n$ git config --global user.email myEmail@example.com\n```\n配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？\n\n3. 创建一个新仓库 - git init\ngit 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git \ninit。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。\n在桌面创建一个联系文件夹 git_exercise, 打开终端：\n\n``` javascript\n$ cd Desktop/git_exercise/\n$ git init\n```\nOK，现在项目还什么都没有，新建一个 hello.txt 文件试试~\n\n4. 检查状态 - git status\ngit status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n\n\thello.txt\n```\ngit 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。\n\n5. 暂存 - git add\ngit 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit \n提交。\n这个例子中只有一个文件：\n\n``` javascript\n$ git add hello.txt\n```\n如果需要提交目录下的所有内容，可以这样：\n\n``` javascript\n$ git add -A\n```\n再次使用git status查看：\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached ...\" to unstage)\n\n\tnew file:   hello.txt\n```\n我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。\n\n6. 提交 - git commit\n一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。\n创建提交，需要我们提交东西到暂存区（git add），然后：\n\n``` javascript\n$ git commit -m \"Initial commit.\"\n```\n这就创建了一次提交，-m \n“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。\n\n## 远端仓库\n到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。\n1. 链接远端仓库 - git remote add\n为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：https://github.com/tutorialzine/awesome-project,但你应该自己在Github, \nBitBucket上搭建仓库，自己一步一步尝试。\n添加测试用的远端仓库\n\n``` javascript\n$ git remote add origin https://github.com/tutorialzine/awesome-project.git\n```\n一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。\n\n2. 上传到服务器 - git push\n每次我们要提交代码到服务器上时，都会使用到git push。\ngit push命令会有两个参数，远端仓库的名字，以及分支的名字：\n\n``` javascript\n$ git push origin master\n\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 212 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tutorialzine/awesome-project.git\n * [new branch]      master -> master\n```\n取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。\n\n3. 克隆仓库 - git clone\n放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。\n\n``` javascript\n$ git clone https://github.com/tutorialzine/awesome-project.git\n```\n本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。\n\n4. 从服务器上拉取代码 - git pull\n如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：\n\n``` javascript\n$ git pull origin master\nFrom https://github.com/tutorialzine/awesome-project\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\n```\n因为暂时没有其他人提交，所有没有任何变动分支\n![branchs](http://oa59b6bv6.bkt.clouddn.com/git2.webp)\nbranchs\n\n当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：\n* 稳定版本的代码不会被破坏\n* 不同的功能可以由不同开发者同时开发。\n* 开发者可以专注于自己的分支，不用担心被其他人破坏了环境\n* 在不确定之前，同一个特性可以拥有几个版本，便于比较\n\n1. 创建新分支 - git branch\n每一个仓库的默认分支都叫master, 创建新分支可以这样：\n\n``` javascript\n$ git branch amazing_new_feature\n```\n创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点\n\n2. 切换分支 - git checkout\n单独使用git branch，可以查看分支状态：\n\n``` javascript\n$ git branch\n  amazing_new_feature\n* master\n```\n* 号表示当前活跃分支为master，使用git checkout切换分支。\n\n\n``` javascript\n$ git checkout amazing_new_feature\n```\n3. 合并分支 - git merge\n我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。\n\n``` javascript\n$ git add feature.txt\n$ git commit -m \"New feature complete.\"\n```\n新分支任务完成了，回到master分支\n\n``` javascript\n$ git checkout master\n```\n现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。\n\n``` javascript\n$ git merge amazing_new_feature\n```\nok! \n然后再把amazing_new_feature 分支删掉吧。\n\n``` javascript\n$ git branch -d amazing_new_feature\n```\n\n## 高级\n这篇文章的最后一节，我们来说些比较高级并且使用的技巧。\n1. 比对两个不同提交之间的差别\n每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git \nlog:\n\n``` javascript\n$ git log\n\ncommit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7\nAuthor: Tutorialzine\nDate:   Mon May 30 17:15:28 2016 +0300\n\n    New feature complete\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ncommit 09bd8cc171d7084e78e4d118a2346b7487dca059\nAuthor: Tutorialzine\nDate:   Sat May 28 17:52:14 2016 +0300\n\n    Initial commit\n```\nid 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:\n\n\n``` javascript\n$ git show b10cc123\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n\n查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：\n\n``` javascript\n$ git diff 09bd8cc..ba25c0ff\n\ndiff --git a/feature.txt b/feature.txt\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。\n\n2. 回滚某个文件到之前的版本\ngit 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。\n下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。\n\n``` javascript\n$ git checkout 09bd8cc1 hello.txt\n```\n\n3. 回滚提交\n如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。\n如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。\n最新的一次提交别名也叫HEAD。\n\n``` javascript\n$ git revert HEAD\n```\n\n其他提交可以使用id:\n\n``` javascript\n$ git revert b10cc123\n```\n混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。\n\n4. 解决合并冲突\n冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。\n比如John 和 Tim \n分别在各自的分支上写了两部分代码。\nJohn 喜欢 for:\n\n``` javascript\n// Use a for \nloop to console.log contents.\nfor(var i=0; i<arr.length; i++) \n{\nconsole.log(arr[i]);\n}\n```\nTim 喜欢 forEach:\n\n``` javascript\n// Use forEach \nto console.log contents.\narr.forEach(function(item) \n{\nconsole.log(item);\n});\n```\n假设John 现在去拉取 \nTim的代码:\n\n``` javascript\n$ git merge tim_branch\n\nAuto-merging print_array.js\nCONFLICT (content): Merge conflict in print_array.js\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。\n于是它就在代码中插入标记。\n\n``` javascript\n<<<<<<< HEAD\n// Use a for loop to console.log contents.\nfor(var i=0; i<arr.length; i++) {\n    console.log(arr[i]);\n}\n=======\n// Use forEach to console.log contents.\narr.forEach(function(item) {\n    console.log(item);\n});\n>>>>>>> Tim s commit.\n```\n==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。\n\n\n``` javascript\n// Not using for loop or forEach.\n// Use Array.toString() to console.log contents.\nconsole.log(arr.toString());\n```\n好了，再提交一下：\n\n``` javascript\n$ git add -A\n$ git commit -m \"Array printing conflict resolved.\"\n```\n\n如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。\n\n5. 配置 .gitignore\n大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：\n在项目根目录创建.gitignore文件\n在文件中列出不需要提交的文件名，文件夹名，每个一行\n.gitignore文件需要提交，就像普通文件一样\n通常会被ignore的文件有：\nlog文件\ntask runner \nbuilds\nnode_modules等文件夹\nIDEs生成的文件\n个人笔记\n例如：\n\n``` javascript\n*.log\nbuild/\nnode_modules/\n.idea/\nmy_notes.txt\n```\n总结\n教程结束~(撒花)\ngit有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！ \n怀挺！\n更多学习资源：\n* git 官方文档\n* git GUI工具\n* 在线创建.gitignore\n* 廖雪峰 git 教程\n* 图解git\n\n> 本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  [原文链接](http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/)\n","source":"_posts/30分钟git命令入门到放弃.md","raw":"---\ntitle: Git 简单使用说明\ndate: 2016-07-11 17:09:08\ntags: git\ncategory: 前端\n---\ngit——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。 \n<!--more-->\n初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！\n![30分钟git命令入门到放弃](http://oa59b6bv6.bkt.clouddn.com/git1.webp)\n\n## learn-git\n\n### 基本了解\n\ngit命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。\n\nGit是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。\n\n\n1. 安装Git\n安装git非常直接：\n* Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：\n\n``` javascript\n$ sudo apt-get install git-all\n```\n\n* Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。\n\n* OS X - 最简单的方式是使用homebrew安装，命令行执行\n\n``` javascript\n$ brew install git\n```\n如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。\n\n2. 配置Git\n安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。\n\n``` javascript\n$ git config --global user.name \"My Name\"\n$ git config --global user.email myEmail@example.com\n```\n配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？\n\n3. 创建一个新仓库 - git init\ngit 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git \ninit。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。\n在桌面创建一个联系文件夹 git_exercise, 打开终端：\n\n``` javascript\n$ cd Desktop/git_exercise/\n$ git init\n```\nOK，现在项目还什么都没有，新建一个 hello.txt 文件试试~\n\n4. 检查状态 - git status\ngit status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n\n\thello.txt\n```\ngit 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。\n\n5. 暂存 - git add\ngit 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit \n提交。\n这个例子中只有一个文件：\n\n``` javascript\n$ git add hello.txt\n```\n如果需要提交目录下的所有内容，可以这样：\n\n``` javascript\n$ git add -A\n```\n再次使用git status查看：\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached ...\" to unstage)\n\n\tnew file:   hello.txt\n```\n我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。\n\n6. 提交 - git commit\n一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。\n创建提交，需要我们提交东西到暂存区（git add），然后：\n\n``` javascript\n$ git commit -m \"Initial commit.\"\n```\n这就创建了一次提交，-m \n“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。\n\n## 远端仓库\n到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。\n1. 链接远端仓库 - git remote add\n为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：https://github.com/tutorialzine/awesome-project,但你应该自己在Github, \nBitBucket上搭建仓库，自己一步一步尝试。\n添加测试用的远端仓库\n\n``` javascript\n$ git remote add origin https://github.com/tutorialzine/awesome-project.git\n```\n一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。\n\n2. 上传到服务器 - git push\n每次我们要提交代码到服务器上时，都会使用到git push。\ngit push命令会有两个参数，远端仓库的名字，以及分支的名字：\n\n``` javascript\n$ git push origin master\n\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 212 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tutorialzine/awesome-project.git\n * [new branch]      master -> master\n```\n取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。\n\n3. 克隆仓库 - git clone\n放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。\n\n``` javascript\n$ git clone https://github.com/tutorialzine/awesome-project.git\n```\n本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。\n\n4. 从服务器上拉取代码 - git pull\n如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：\n\n``` javascript\n$ git pull origin master\nFrom https://github.com/tutorialzine/awesome-project\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\n```\n因为暂时没有其他人提交，所有没有任何变动分支\n![branchs](http://oa59b6bv6.bkt.clouddn.com/git2.webp)\nbranchs\n\n当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：\n* 稳定版本的代码不会被破坏\n* 不同的功能可以由不同开发者同时开发。\n* 开发者可以专注于自己的分支，不用担心被其他人破坏了环境\n* 在不确定之前，同一个特性可以拥有几个版本，便于比较\n\n1. 创建新分支 - git branch\n每一个仓库的默认分支都叫master, 创建新分支可以这样：\n\n``` javascript\n$ git branch amazing_new_feature\n```\n创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点\n\n2. 切换分支 - git checkout\n单独使用git branch，可以查看分支状态：\n\n``` javascript\n$ git branch\n  amazing_new_feature\n* master\n```\n* 号表示当前活跃分支为master，使用git checkout切换分支。\n\n\n``` javascript\n$ git checkout amazing_new_feature\n```\n3. 合并分支 - git merge\n我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。\n\n``` javascript\n$ git add feature.txt\n$ git commit -m \"New feature complete.\"\n```\n新分支任务完成了，回到master分支\n\n``` javascript\n$ git checkout master\n```\n现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。\n\n``` javascript\n$ git merge amazing_new_feature\n```\nok! \n然后再把amazing_new_feature 分支删掉吧。\n\n``` javascript\n$ git branch -d amazing_new_feature\n```\n\n## 高级\n这篇文章的最后一节，我们来说些比较高级并且使用的技巧。\n1. 比对两个不同提交之间的差别\n每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git \nlog:\n\n``` javascript\n$ git log\n\ncommit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7\nAuthor: Tutorialzine\nDate:   Mon May 30 17:15:28 2016 +0300\n\n    New feature complete\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ncommit 09bd8cc171d7084e78e4d118a2346b7487dca059\nAuthor: Tutorialzine\nDate:   Sat May 28 17:52:14 2016 +0300\n\n    Initial commit\n```\nid 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:\n\n\n``` javascript\n$ git show b10cc123\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n\n查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：\n\n``` javascript\n$ git diff 09bd8cc..ba25c0ff\n\ndiff --git a/feature.txt b/feature.txt\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。\n\n2. 回滚某个文件到之前的版本\ngit 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。\n下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。\n\n``` javascript\n$ git checkout 09bd8cc1 hello.txt\n```\n\n3. 回滚提交\n如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。\n如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。\n最新的一次提交别名也叫HEAD。\n\n``` javascript\n$ git revert HEAD\n```\n\n其他提交可以使用id:\n\n``` javascript\n$ git revert b10cc123\n```\n混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。\n\n4. 解决合并冲突\n冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。\n比如John 和 Tim \n分别在各自的分支上写了两部分代码。\nJohn 喜欢 for:\n\n``` javascript\n// Use a for \nloop to console.log contents.\nfor(var i=0; i<arr.length; i++) \n{\nconsole.log(arr[i]);\n}\n```\nTim 喜欢 forEach:\n\n``` javascript\n// Use forEach \nto console.log contents.\narr.forEach(function(item) \n{\nconsole.log(item);\n});\n```\n假设John 现在去拉取 \nTim的代码:\n\n``` javascript\n$ git merge tim_branch\n\nAuto-merging print_array.js\nCONFLICT (content): Merge conflict in print_array.js\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。\n于是它就在代码中插入标记。\n\n``` javascript\n<<<<<<< HEAD\n// Use a for loop to console.log contents.\nfor(var i=0; i<arr.length; i++) {\n    console.log(arr[i]);\n}\n=======\n// Use forEach to console.log contents.\narr.forEach(function(item) {\n    console.log(item);\n});\n>>>>>>> Tim s commit.\n```\n==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。\n\n\n``` javascript\n// Not using for loop or forEach.\n// Use Array.toString() to console.log contents.\nconsole.log(arr.toString());\n```\n好了，再提交一下：\n\n``` javascript\n$ git add -A\n$ git commit -m \"Array printing conflict resolved.\"\n```\n\n如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。\n\n5. 配置 .gitignore\n大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：\n在项目根目录创建.gitignore文件\n在文件中列出不需要提交的文件名，文件夹名，每个一行\n.gitignore文件需要提交，就像普通文件一样\n通常会被ignore的文件有：\nlog文件\ntask runner \nbuilds\nnode_modules等文件夹\nIDEs生成的文件\n个人笔记\n例如：\n\n``` javascript\n*.log\nbuild/\nnode_modules/\n.idea/\nmy_notes.txt\n```\n总结\n教程结束~(撒花)\ngit有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！ \n怀挺！\n更多学习资源：\n* git 官方文档\n* git GUI工具\n* 在线创建.gitignore\n* 廖雪峰 git 教程\n* 图解git\n\n> 本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  [原文链接](http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/)\n","slug":"30分钟git命令入门到放弃","published":1,"updated":"2016-07-12T05:47:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqklmwuf00005myv2yk0casv","content":"<p>git——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。<br><a id=\"more\"></a><br>初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git1.webp\" alt=\"30分钟git命令入门到放弃\"></p>\n<h2 id=\"learn-git\"><a href=\"#learn-git\" class=\"headerlink\" title=\"learn-git\"></a>learn-git</h2><h3 id=\"基本了解\"><a href=\"#基本了解\" class=\"headerlink\" title=\"基本了解\"></a>基本了解</h3><p>git命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。</p>\n<p>Git是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。</p>\n<ol>\n<li>安装Git<br>安装git非常直接：</li>\n</ol>\n<ul>\n<li>Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git-all</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。</p>\n</li>\n<li><p>OS X - 最简单的方式是使用homebrew安装，命令行执行</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install git</div></pre></td></tr></table></figure>\n<p>如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。</p>\n<ol>\n<li>配置Git<br>安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"My Name\"</span></div><div class=\"line\">$ git config --global user.email myEmail@example.com</div></pre></td></tr></table></figure>\n<p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p>\n<ol>\n<li>创建一个新仓库 - git init<br>git 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git<br>init。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。<br>在桌面创建一个联系文件夹 git_exercise, 打开终端：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd Desktop/git_exercise/</div><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p>OK，现在项目还什么都没有，新建一个 hello.txt 文件试试~</p>\n<ol>\n<li>检查状态 - git status<br>git status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add ...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">\thello.txt</div></pre></td></tr></table></figure>\n<p>git 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。</p>\n<ol>\n<li>暂存 - git add<br>git 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit<br>提交。<br>这个例子中只有一个文件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add hello.txt</div></pre></td></tr></table></figure>\n<p>如果需要提交目录下的所有内容，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure>\n<p>再次使用git status查看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git rm --cached ...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">new</span> file:   hello.txt</div></pre></td></tr></table></figure>\n<p>我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。</p>\n<ol>\n<li>提交 - git commit<br>一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。<br>创建提交，需要我们提交东西到暂存区（git add），然后：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"Initial commit.\"</span></div></pre></td></tr></table></figure>\n<p>这就创建了一次提交，-m<br>“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。</p>\n<h2 id=\"远端仓库\"><a href=\"#远端仓库\" class=\"headerlink\" title=\"远端仓库\"></a>远端仓库</h2><p>到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。</p>\n<ol>\n<li>链接远端仓库 - git remote add<br>为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：<a href=\"https://github.com/tutorialzine/awesome-project,但你应该自己在Github\" target=\"_blank\" rel=\"external\">https://github.com/tutorialzine/awesome-project,但你应该自己在Github</a>,<br>BitBucket上搭建仓库，自己一步一步尝试。<br>添加测试用的远端仓库</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。</p>\n<ol>\n<li>上传到服务器 - git push<br>每次我们要提交代码到服务器上时，都会使用到git push。<br>git push命令会有两个参数，远端仓库的名字，以及分支的名字：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div><div class=\"line\"></div><div class=\"line\">Counting objects: <span class=\"number\">3</span>, done.</div><div class=\"line\">Writing objects: <span class=\"number\">100</span>% (<span class=\"number\">3</span>/<span class=\"number\">3</span>), <span class=\"number\">212</span> bytes | <span class=\"number\">0</span> bytes/s, done.</div><div class=\"line\">Total <span class=\"number\">3</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</div><div class=\"line\">To https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div><div class=\"line\"> * [<span class=\"keyword\">new</span> branch]      master -&gt; master</div></pre></td></tr></table></figure>\n<p>取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。</p>\n<ol>\n<li>克隆仓库 - git clone<br>放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。</p>\n<ol>\n<li>从服务器上拉取代码 - git pull<br>如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div><div class=\"line\">From https:<span class=\"comment\">//github.com/tutorialzine/awesome-project</span></div><div class=\"line\"> * branch            master     -&gt; FETCH_HEAD</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure>\n<p>因为暂时没有其他人提交，所有没有任何变动分支<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git2.webp\" alt=\"branchs\"><br>branchs</p>\n<p>当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：</p>\n<ul>\n<li>稳定版本的代码不会被破坏</li>\n<li>不同的功能可以由不同开发者同时开发。</li>\n<li>开发者可以专注于自己的分支，不用担心被其他人破坏了环境</li>\n<li>在不确定之前，同一个特性可以拥有几个版本，便于比较</li>\n</ul>\n<ol>\n<li>创建新分支 - git branch<br>每一个仓库的默认分支都叫master, 创建新分支可以这样：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch amazing_new_feature</div></pre></td></tr></table></figure>\n<p>创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点</p>\n<ol>\n<li>切换分支 - git checkout<br>单独使用git branch，可以查看分支状态：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\">  amazing_new_feature</div><div class=\"line\">* master</div></pre></td></tr></table></figure>\n<ul>\n<li>号表示当前活跃分支为master，使用git checkout切换分支。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout amazing_new_feature</div></pre></td></tr></table></figure>\n<ol>\n<li>合并分支 - git merge<br>我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add feature.txt</div><div class=\"line\">$ git commit -m <span class=\"string\">\"New feature complete.\"</span></div></pre></td></tr></table></figure>\n<p>新分支任务完成了，回到master分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<p>现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge amazing_new_feature</div></pre></td></tr></table></figure>\n<p>ok!<br>然后再把amazing_new_feature 分支删掉吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d amazing_new_feature</div></pre></td></tr></table></figure>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p>这篇文章的最后一节，我们来说些比较高级并且使用的技巧。</p>\n<ol>\n<li>比对两个不同提交之间的差别<br>每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git<br>log:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div><div class=\"line\"></div><div class=\"line\">commit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">17</span>:<span class=\"number\">15</span>:<span class=\"number\">28</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    New feature complete</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">commit <span class=\"number\">09</span>bd8cc171d7084e78e4d118a2346b7487dca059</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Sat May <span class=\"number\">28</span> <span class=\"number\">17</span>:<span class=\"number\">52</span>:<span class=\"number\">14</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Initial commit</div></pre></td></tr></table></figure>\n<p>id 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git show b10cc123</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff <span class=\"number\">09</span>bd8cc..ba25c0ff</div><div class=\"line\"></div><div class=\"line\">diff --git a/feature.txt b/feature.txt</div><div class=\"line\"><span class=\"keyword\">new</span> file mode <span class=\"number\">100644</span></div><div class=\"line\">index <span class=\"number\">0000000.</span>.e69de29</div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。</p>\n<ol>\n<li>回滚某个文件到之前的版本<br>git 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。<br>下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout <span class=\"number\">09</span>bd8cc1 hello.txt</div></pre></td></tr></table></figure>\n<ol>\n<li>回滚提交<br>如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。<br>如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。<br>最新的一次提交别名也叫HEAD。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert HEAD</div></pre></td></tr></table></figure>\n<p>其他提交可以使用id:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert b10cc123</div></pre></td></tr></table></figure>\n<p>混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。</p>\n<ol>\n<li>解决合并冲突<br>冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。<br>比如John 和 Tim<br>分别在各自的分支上写了两部分代码。<br>John 喜欢 for:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use a for </span></div><div class=\"line\">loop to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">for(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) </div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Tim 喜欢 forEach:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use forEach </span></div><div class=\"line\">to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>假设John 现在去拉取<br>Tim的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge tim_branch</div><div class=\"line\"></div><div class=\"line\">Auto-merging print_array.js</div><div class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> print_array.js</div><div class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n<p>这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。<br>于是它就在代码中插入标记。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">// Use a for loop to console.log contents.</div><div class=\"line\">for(var i=0; i&lt;arr.length; i++) &#123;</div><div class=\"line\">    console.log(arr[i]);</div><div class=\"line\">&#125;</div><div class=\"line\">=======</div><div class=\"line\">// Use forEach to console.log contents.</div><div class=\"line\">arr.forEach(function(item) &#123;</div><div class=\"line\">    console.log(item);</div><div class=\"line\">&#125;);</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Tim s commit.</div></pre></td></tr></table></figure>\n<p>==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Not using for loop or forEach.</span></div><div class=\"line\"><span class=\"comment\">// Use Array.toString() to console.log contents.</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString());</div></pre></td></tr></table></figure>\n<p>好了，再提交一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div><div class=\"line\">$ git commit -m <span class=\"string\">\"Array printing conflict resolved.\"</span></div></pre></td></tr></table></figure>\n<p>如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。</p>\n<ol>\n<li>配置 .gitignore<br>大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：<br>在项目根目录创建.gitignore文件<br>在文件中列出不需要提交的文件名，文件夹名，每个一行<br>.gitignore文件需要提交，就像普通文件一样<br>通常会被ignore的文件有：<br>log文件<br>task runner<br>builds<br>node_modules等文件夹<br>IDEs生成的文件<br>个人笔记<br>例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.log</div><div class=\"line\">build/</div><div class=\"line\">node_modules/</div><div class=\"line\">.idea/</div><div class=\"line\">my_notes.txt</div></pre></td></tr></table></figure>\n<p>总结<br>教程结束~(撒花)<br>git有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！<br>怀挺！<br>更多学习资源：</p>\n<ul>\n<li>git 官方文档</li>\n<li>git GUI工具</li>\n<li>在线创建.gitignore</li>\n<li>廖雪峰 git 教程</li>\n<li>图解git</li>\n</ul>\n<blockquote>\n<p>本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  <a href=\"http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n</blockquote>\n","excerpt":"<p>git——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。<br>","more":"<br>初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git1.webp\" alt=\"30分钟git命令入门到放弃\"></p>\n<h2 id=\"learn-git\"><a href=\"#learn-git\" class=\"headerlink\" title=\"learn-git\"></a>learn-git</h2><h3 id=\"基本了解\"><a href=\"#基本了解\" class=\"headerlink\" title=\"基本了解\"></a>基本了解</h3><p>git命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。</p>\n<p>Git是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。</p>\n<ol>\n<li>安装Git<br>安装git非常直接：</li>\n</ol>\n<ul>\n<li>Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git-all</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。</p>\n</li>\n<li><p>OS X - 最简单的方式是使用homebrew安装，命令行执行</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install git</div></pre></td></tr></table></figure>\n<p>如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。</p>\n<ol>\n<li>配置Git<br>安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"My Name\"</span></div><div class=\"line\">$ git config --global user.email myEmail@example.com</div></pre></td></tr></table></figure>\n<p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p>\n<ol>\n<li>创建一个新仓库 - git init<br>git 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git<br>init。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。<br>在桌面创建一个联系文件夹 git_exercise, 打开终端：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd Desktop/git_exercise/</div><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p>OK，现在项目还什么都没有，新建一个 hello.txt 文件试试~</p>\n<ol>\n<li>检查状态 - git status<br>git status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add ...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">\thello.txt</div></pre></td></tr></table></figure>\n<p>git 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。</p>\n<ol>\n<li>暂存 - git add<br>git 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit<br>提交。<br>这个例子中只有一个文件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add hello.txt</div></pre></td></tr></table></figure>\n<p>如果需要提交目录下的所有内容，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure>\n<p>再次使用git status查看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git rm --cached ...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">new</span> file:   hello.txt</div></pre></td></tr></table></figure>\n<p>我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。</p>\n<ol>\n<li>提交 - git commit<br>一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。<br>创建提交，需要我们提交东西到暂存区（git add），然后：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"Initial commit.\"</span></div></pre></td></tr></table></figure>\n<p>这就创建了一次提交，-m<br>“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。</p>\n<h2 id=\"远端仓库\"><a href=\"#远端仓库\" class=\"headerlink\" title=\"远端仓库\"></a>远端仓库</h2><p>到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。</p>\n<ol>\n<li>链接远端仓库 - git remote add<br>为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：<a href=\"https://github.com/tutorialzine/awesome-project,但你应该自己在Github\">https://github.com/tutorialzine/awesome-project,但你应该自己在Github</a>,<br>BitBucket上搭建仓库，自己一步一步尝试。<br>添加测试用的远端仓库</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。</p>\n<ol>\n<li>上传到服务器 - git push<br>每次我们要提交代码到服务器上时，都会使用到git push。<br>git push命令会有两个参数，远端仓库的名字，以及分支的名字：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div><div class=\"line\"></div><div class=\"line\">Counting objects: <span class=\"number\">3</span>, done.</div><div class=\"line\">Writing objects: <span class=\"number\">100</span>% (<span class=\"number\">3</span>/<span class=\"number\">3</span>), <span class=\"number\">212</span> bytes | <span class=\"number\">0</span> bytes/s, done.</div><div class=\"line\">Total <span class=\"number\">3</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</div><div class=\"line\">To https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div><div class=\"line\"> * [<span class=\"keyword\">new</span> branch]      master -&gt; master</div></pre></td></tr></table></figure>\n<p>取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。</p>\n<ol>\n<li>克隆仓库 - git clone<br>放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。</p>\n<ol>\n<li>从服务器上拉取代码 - git pull<br>如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div><div class=\"line\">From https:<span class=\"comment\">//github.com/tutorialzine/awesome-project</span></div><div class=\"line\"> * branch            master     -&gt; FETCH_HEAD</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure>\n<p>因为暂时没有其他人提交，所有没有任何变动分支<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git2.webp\" alt=\"branchs\"><br>branchs</p>\n<p>当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：</p>\n<ul>\n<li>稳定版本的代码不会被破坏</li>\n<li>不同的功能可以由不同开发者同时开发。</li>\n<li>开发者可以专注于自己的分支，不用担心被其他人破坏了环境</li>\n<li>在不确定之前，同一个特性可以拥有几个版本，便于比较</li>\n</ul>\n<ol>\n<li>创建新分支 - git branch<br>每一个仓库的默认分支都叫master, 创建新分支可以这样：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch amazing_new_feature</div></pre></td></tr></table></figure>\n<p>创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点</p>\n<ol>\n<li>切换分支 - git checkout<br>单独使用git branch，可以查看分支状态：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\">  amazing_new_feature</div><div class=\"line\">* master</div></pre></td></tr></table></figure>\n<ul>\n<li>号表示当前活跃分支为master，使用git checkout切换分支。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout amazing_new_feature</div></pre></td></tr></table></figure>\n<ol>\n<li>合并分支 - git merge<br>我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add feature.txt</div><div class=\"line\">$ git commit -m <span class=\"string\">\"New feature complete.\"</span></div></pre></td></tr></table></figure>\n<p>新分支任务完成了，回到master分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<p>现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge amazing_new_feature</div></pre></td></tr></table></figure>\n<p>ok!<br>然后再把amazing_new_feature 分支删掉吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d amazing_new_feature</div></pre></td></tr></table></figure>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p>这篇文章的最后一节，我们来说些比较高级并且使用的技巧。</p>\n<ol>\n<li>比对两个不同提交之间的差别<br>每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git<br>log:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div><div class=\"line\"></div><div class=\"line\">commit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">17</span>:<span class=\"number\">15</span>:<span class=\"number\">28</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    New feature complete</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">commit <span class=\"number\">09</span>bd8cc171d7084e78e4d118a2346b7487dca059</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Sat May <span class=\"number\">28</span> <span class=\"number\">17</span>:<span class=\"number\">52</span>:<span class=\"number\">14</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Initial commit</div></pre></td></tr></table></figure>\n<p>id 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git show b10cc123</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff <span class=\"number\">09</span>bd8cc..ba25c0ff</div><div class=\"line\"></div><div class=\"line\">diff --git a/feature.txt b/feature.txt</div><div class=\"line\"><span class=\"keyword\">new</span> file mode <span class=\"number\">100644</span></div><div class=\"line\">index <span class=\"number\">0000000.</span>.e69de29</div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。</p>\n<ol>\n<li>回滚某个文件到之前的版本<br>git 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。<br>下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout <span class=\"number\">09</span>bd8cc1 hello.txt</div></pre></td></tr></table></figure>\n<ol>\n<li>回滚提交<br>如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。<br>如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。<br>最新的一次提交别名也叫HEAD。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert HEAD</div></pre></td></tr></table></figure>\n<p>其他提交可以使用id:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert b10cc123</div></pre></td></tr></table></figure>\n<p>混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。</p>\n<ol>\n<li>解决合并冲突<br>冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。<br>比如John 和 Tim<br>分别在各自的分支上写了两部分代码。<br>John 喜欢 for:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use a for </span></div><div class=\"line\">loop to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">for(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) </div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Tim 喜欢 forEach:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use forEach </span></div><div class=\"line\">to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>假设John 现在去拉取<br>Tim的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge tim_branch</div><div class=\"line\"></div><div class=\"line\">Auto-merging print_array.js</div><div class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> print_array.js</div><div class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n<p>这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。<br>于是它就在代码中插入标记。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">// Use a for loop to console.log contents.</div><div class=\"line\">for(var i=0; i&lt;arr.length; i++) &#123;</div><div class=\"line\">    console.log(arr[i]);</div><div class=\"line\">&#125;</div><div class=\"line\">=======</div><div class=\"line\">// Use forEach to console.log contents.</div><div class=\"line\">arr.forEach(function(item) &#123;</div><div class=\"line\">    console.log(item);</div><div class=\"line\">&#125;);</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Tim s commit.</div></pre></td></tr></table></figure>\n<p>==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Not using for loop or forEach.</span></div><div class=\"line\"><span class=\"comment\">// Use Array.toString() to console.log contents.</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString());</div></pre></td></tr></table></figure>\n<p>好了，再提交一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div><div class=\"line\">$ git commit -m <span class=\"string\">\"Array printing conflict resolved.\"</span></div></pre></td></tr></table></figure>\n<p>如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。</p>\n<ol>\n<li>配置 .gitignore<br>大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：<br>在项目根目录创建.gitignore文件<br>在文件中列出不需要提交的文件名，文件夹名，每个一行<br>.gitignore文件需要提交，就像普通文件一样<br>通常会被ignore的文件有：<br>log文件<br>task runner<br>builds<br>node_modules等文件夹<br>IDEs生成的文件<br>个人笔记<br>例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.log</div><div class=\"line\">build/</div><div class=\"line\">node_modules/</div><div class=\"line\">.idea/</div><div class=\"line\">my_notes.txt</div></pre></td></tr></table></figure>\n<p>总结<br>教程结束~(撒花)<br>git有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！<br>怀挺！<br>更多学习资源：</p>\n<ul>\n<li>git 官方文档</li>\n<li>git GUI工具</li>\n<li>在线创建.gitignore</li>\n<li>廖雪峰 git 教程</li>\n<li>图解git</li>\n</ul>\n<blockquote>\n<p>本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  <a href=\"http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/\">原文链接</a></p>\n</blockquote>"},{"title":"The front-end web site to collect","date":"2016-06-11T11:09:08.000Z","_content":"本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。\n<!--more-->\n[coding](https://coding.net/)\n\n[如何写一篇hexo博客](http://www.jianshu.com/p/3c7ddd48bfa9)\n\n","source":"_posts/The front-end web site to collect.md","raw":"---\ntitle: The front-end web site to collect\ndate: 2016-06-11 19:09:08\ntags:\n---\n本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。\n<!--more-->\n[coding](https://coding.net/)\n\n[如何写一篇hexo博客](http://www.jianshu.com/p/3c7ddd48bfa9)\n\n","slug":"The front-end web site to collect","published":1,"updated":"2016-07-12T05:31:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqklmwuk00015myv56x6hn6z","content":"<p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。<br><a id=\"more\"></a><br><a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">coding</a></p>\n<p><a href=\"http://www.jianshu.com/p/3c7ddd48bfa9\" target=\"_blank\" rel=\"external\">如何写一篇hexo博客</a></p>\n","excerpt":"<p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。<br>","more":"<br><a href=\"https://coding.net/\">coding</a></p>\n<p><a href=\"http://www.jianshu.com/p/3c7ddd48bfa9\">如何写一篇hexo博客</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciqklmwuf00005myv2yk0casv","category_id":"ciqklmwup00035myvnjnjpy5f","_id":"ciqklmwut00055myvih4ki46n"}],"PostTag":[{"post_id":"ciqklmwuf00005myv2yk0casv","tag_id":"ciqklmwun00025myvriu4jmmb","_id":"ciqklmwus00045myv3vxux2w4"}],"Tag":[{"name":"git","_id":"ciqklmwun00025myvriu4jmmb"}]}}