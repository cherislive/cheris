{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"themes/cheris/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/projrct/treenode/index.html","path":"projrct/treenode/index.html","modified":1,"renderable":0},{"_id":"source/projrct/treenode/treenode.js","path":"projrct/treenode/treenode.js","modified":1,"renderable":0},{"_id":"themes/cheris/source/css/style-2.styl","path":"css/style-2.styl","modified":1,"renderable":1},{"_id":"themes/cheris/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/article.jpg","path":"images/article.jpg","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/icon-bubble.svg","path":"images/icon-bubble.svg","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/icon-categories.svg","path":"images/icon-categories.svg","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/icon-tags.svg","path":"images/icon-tags.svg","modified":1,"renderable":1},{"_id":"themes/cheris/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"source/projrct/treenode/jquery-1.8.2.min.js","path":"projrct/treenode/jquery-1.8.2.min.js","modified":1,"renderable":0}],"Cache":[{"_id":"source/README.md","hash":"dd8d8306daaf3523a7cf7dba59baeeedab6de1f3","modified":1468466455802},{"_id":"themes/cheris/.gitignore","hash":"803c06a7086b5817c03d2e8672da27bc56ba2bce","modified":1468466455804},{"_id":"themes/cheris/_config.yml","hash":"1185b83cec0ccc1a7b2da694f21522c4af53aa07","modified":1468466455805},{"_id":"source/_posts/30分钟git命令入门到放弃.md","hash":"8634bcc719e7647d00e74a6da6e1cc9a405b3963","modified":1468466455802},{"_id":"source/_posts/Git常用命令.md","hash":"3eb23e1a430580ebcadc86e8ad238debc0860b5b","modified":1468466455803},{"_id":"source/_posts/The front-end web site to collect.md","hash":"f99ad72283fbd4aaa9a259045d9343d0e00d9c77","modified":1468466455803},{"_id":"source/_posts/Hexo 多设备管理.md","hash":"4c48bc8f969c771b6140a8e37cf2615f93a38918","modified":1468485927624},{"_id":"source/_posts/如何使用Gulp构建项目.md","hash":"474849581212210a475ad60d9052c6c132946e49","modified":1468467055132},{"_id":"source/_posts/搭建一个Hexo博客.md","hash":"2926fa8cc893bd56e4b87a45422d6850852d7e35","modified":1468466455804},{"_id":"themes/cheris/languages/default.yml","hash":"45a293d8ed52429dbaee500c567206761106e1fd","modified":1468466455805},{"_id":"themes/cheris/languages/zh-CN.yml","hash":"92727f45f6f6846688934c405668c2ee66c69be3","modified":1468466455805},{"_id":"themes/cheris/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1468466455809},{"_id":"themes/cheris/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1468466455809},{"_id":"themes/cheris/layout/index.ejs","hash":"739c2f028a27720730c17efa147382a7d4a52994","modified":1468466455809},{"_id":"themes/cheris/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1468466455810},{"_id":"themes/cheris/layout/layout.ejs","hash":"2418e52631596c60741e16cd2080aa26258d2120","modified":1468466455809},{"_id":"themes/cheris/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1468466455810},{"_id":"themes/cheris/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1468466455810},{"_id":"themes/cheris/source/favicon.ico","hash":"17cec2383d6442ab02f456dde75a598240dce259","modified":1468466455821},{"_id":"source/projrct/treenode/index.html","hash":"5ec2fcddde1fdb2415f0ce9f29762fc3594935c4","modified":1431350090101},{"_id":"source/projrct/treenode/treenode.js","hash":"54877eda0790c7af9de09f28dccc749d15ec28ef","modified":1431350090101},{"_id":"themes/cheris/layout/_partial/archive.ejs","hash":"63a4d38faa5031d05941d41c616c71881f1b0b0a","modified":1468466455806},{"_id":"themes/cheris/layout/_partial/article_default.ejs","hash":"70868ec20da6b3ed637845e17def1d1e9c0822b7","modified":1468466455806},{"_id":"themes/cheris/layout/_partial/article.ejs","hash":"4e8afc06b7f5522d5d99a32498076a4e86c139a5","modified":1468466455806},{"_id":"themes/cheris/layout/_partial/article_index.ejs","hash":"ec07faac05783538b2e9c026087a4bc27f234395","modified":1468466455806},{"_id":"themes/cheris/layout/_partial/comment.ejs","hash":"ff1738ac6433fbde1b73c50a385097468e1cc368","modified":1468466455807},{"_id":"themes/cheris/layout/_partial/footer.ejs","hash":"64007408ed3dd26f54b806fc3686ec6b7273f71b","modified":1468466455807},{"_id":"themes/cheris/layout/_partial/googleanalytics.ejs","hash":"cc5e3c636e91b48884bc8a6fc46ca89d4d9f7e0b","modified":1468466455807},{"_id":"themes/cheris/layout/_partial/head.ejs","hash":"79a82b83e6a35bcba8ffc329981cc596d1fb6977","modified":1468466455807},{"_id":"themes/cheris/layout/_partial/header.ejs","hash":"817852ed5f14470b188c9888a24f2b33e27487b9","modified":1468466455808},{"_id":"themes/cheris/layout/_partial/pagination.ejs","hash":"51ca5fe5e2a3e4b1cf3eeb1611eff2ebb3f079e0","modified":1468466455808},{"_id":"themes/cheris/source/css/style-2.styl","hash":"0178ea094cab818f9c430203f600abcf827faf43","modified":1468466455821},{"_id":"themes/cheris/source/css/style.styl","hash":"fc04a8a40c0f8a43dbd115fb77b20d842caee2ae","modified":1468466455821},{"_id":"themes/cheris/source/images/article.jpg","hash":"b1731429972273ad832fbc1337702de851f82181","modified":1468466455822},{"_id":"themes/cheris/source/images/avatar.jpg","hash":"77c5b57042d1f3af059a0ef589657dba3419dc26","modified":1468466455822},{"_id":"themes/cheris/source/images/avatar.png","hash":"2ca9ecd71c5eace855736bc60890028e994ce74d","modified":1468466455823},{"_id":"themes/cheris/source/images/icon-bubble.svg","hash":"c052a2f96808d72ef53b3f722fe832cdc3b6fc68","modified":1468466455823},{"_id":"themes/cheris/source/images/icon-heart.svg","hash":"5fe7b418079dd99223e7ca9c09f84ae810e86af4","modified":1468466455824},{"_id":"themes/cheris/source/images/icon-categories.svg","hash":"d1c483574ba07f5c3e4573ec16c7595c7c32fa5a","modified":1468466455824},{"_id":"themes/cheris/source/images/icon-tags.svg","hash":"983e1f59e0efb3614e70acd858c1d3d12638bb15","modified":1468466455824},{"_id":"themes/cheris/source/images/logo.png","hash":"d65b650a670b87ba4bbaa48139d2a4489494dc79","modified":1468466455824},{"_id":"source/projrct/treenode/jquery-1.8.2.min.js","hash":"d09d3a99ed25d0f1fbe6856de9e14ffd33557256","modified":1431350090101},{"_id":"themes/cheris/layout/_partial/post/category.ejs","hash":"9f0102819f22aa8b5e28fad92090259c24eae649","modified":1468466455808},{"_id":"themes/cheris/layout/_partial/post/gallery.ejs","hash":"90f0ec1b8d291d7f37ceb11ef270637aeff7d67e","modified":1468466455808},{"_id":"themes/cheris/layout/_partial/post/title.ejs","hash":"ca8e74007b94d5a1229069143fd8f62caf02064f","modified":1468466455809},{"_id":"themes/cheris/layout/_partial/post/tag.ejs","hash":"f1a1534a8d6d7b93c393065e839aa91eeee8c27f","modified":1468466455809},{"_id":"themes/cheris/source/css/_base/layout.css","hash":"1abbcc84819b0e92e6622f0a5ccecccc5cb952eb","modified":1468466455811},{"_id":"themes/cheris/source/css/_base/normalize.css","hash":"f466245d5ad990c1062481c0e1f8741fb4bfa00e","modified":1468466455811},{"_id":"themes/cheris/source/css/_base/responsive.css","hash":"538db170a07228ab30f0fa69389be7ab4361c444","modified":1468466455812},{"_id":"themes/cheris/source/css/_base/style.css","hash":"201c933987ba86e499f1cc71f741fa8bf9dced0b","modified":1468466455812},{"_id":"themes/cheris/source/css/_base/syntax.css","hash":"95ba47d914bfa1aa9597c19692932fbe6969e613","modified":1468466455813},{"_id":"themes/cheris/source/css/_base/syntax.styl","hash":"d4195330f2804763792cf89719eed1c566d7ac0f","modified":1468466455813},{"_id":"themes/cheris/source/css/_cheris/base.css","hash":"f89f6b87e5c7c0e894e2b945c289ad8411ad095f","modified":1468466455813},{"_id":"themes/cheris/source/css/_base/utils.css","hash":"dd84b018e38cb941d0258923ba66c30c148939fd","modified":1468466455813},{"_id":"themes/cheris/source/css/_cheris/highlight.css","hash":"19c563f1e22b619c7a787d3e5c947dbcf5ca914b","modified":1468466455814},{"_id":"themes/cheris/source/css/_cheris/style_tmp.css","hash":"16a6e57e9af7d6a48ce38ccbf004db64250eab84","modified":1468466455814},{"_id":"themes/cheris/source/css/_cheris/style.css","hash":"49e266e81524287ddc9c9e2a9ccc7d07a04b7f2e","modified":1468466455814},{"_id":"themes/cheris/source/css/_partial/archive.css","hash":"ff3ada9a1dc7efbbd52c3bd67bf94aa0017d64ab","modified":1468466455814},{"_id":"themes/cheris/source/css/_partial/article.css","hash":"9dc8de90093946911e83cc0258d873b0f9526f8e","modified":1468466455815},{"_id":"themes/cheris/source/css/_partial/footer.css","hash":"3f0146a2a90f47e3c7d4f3f7458cc7d252ba580a","modified":1468466455815},{"_id":"themes/cheris/source/css/_partial/header.css","hash":"e6b6a900b696f9b646b12a121e4c24017424520f","modified":1468466455815},{"_id":"themes/cheris/source/css/_partial/icon.css","hash":"2ef57876e7f395044c883b399375727e219675d0","modified":1468466455815},{"_id":"themes/cheris/source/css/_partial/media.css","hash":"84372429ae44cb59d591e93536538689952a5879","modified":1468466455815},{"_id":"themes/cheris/source/css/_partial/pagination.css","hash":"60bf5440dd9ce09779be0a162712b8e27b75dc8b","modified":1468466455820},{"_id":"public/2016/07/14/如何使用Gulp构建项目/index.html","hash":"83a349e094526d2a6c1eff192a1f4db8598bad27","modified":1468486416712},{"_id":"public/2016/07/13/Hexo 多设备管理/index.html","hash":"111167c518fbd7743c09c6afe9535babbb470f31","modified":1468486416712},{"_id":"public/2016/06/11/The front-end web site to collect/index.html","hash":"1626173e927ca3a3160511dfe1a7ab99ae295588","modified":1468486416712},{"_id":"public/archives/index.html","hash":"9f0fa45d621eb00c213e81ea609bfdaa2146b98b","modified":1468486416712},{"_id":"public/archives/2016/index.html","hash":"fabf39cfcd0c6970f19c07e10778bd6599c0e895","modified":1468486416712},{"_id":"public/archives/2016/06/index.html","hash":"032e153898ba10994fa3cb0a5595b8c416f8fa55","modified":1468486416712},{"_id":"public/archives/2016/07/index.html","hash":"73540258495eb6e35226b9f6acae896fc4d7d612","modified":1468486416713},{"_id":"public/categories/前端/index.html","hash":"0b86d23550f73b86f96c4920ffc730df3bd6643a","modified":1468486416713},{"_id":"public/tags/Git/index.html","hash":"ab3f71f72a6ce7216534678bbacbcca7bdab5d20","modified":1468486416713},{"_id":"public/tags/Gulp/index.html","hash":"b1202b0e5dea0772ec09ce340d5ae44f3229f036","modified":1468486416713},{"_id":"public/tags/Hexo/index.html","hash":"b7e3fd437d4e36eb5748c38cfc526c6c899642e2","modified":1468486416713},{"_id":"public/index.html","hash":"5cbee0215e325434da704b0ee5ac97e3a51b9195","modified":1468486416713},{"_id":"public/2016/07/14/Git常用命令/index.html","hash":"802e78a51ca68d35a1cea75b456b0be72049d9b8","modified":1468486416713},{"_id":"public/2016/07/13/搭建一个Hexo博客/index.html","hash":"60382733596ee699846cb02c3230552077057760","modified":1468486416713},{"_id":"public/2016/07/11/30分钟git命令入门到放弃/index.html","hash":"e72fcaf13479932a4d8016b93a7fe951c5657eb6","modified":1468486416713},{"_id":"public/README.md","hash":"dd8d8306daaf3523a7cf7dba59baeeedab6de1f3","modified":1468486416722},{"_id":"public/favicon.ico","hash":"17cec2383d6442ab02f456dde75a598240dce259","modified":1468486416722},{"_id":"public/projrct/treenode/index.html","hash":"5ec2fcddde1fdb2415f0ce9f29762fc3594935c4","modified":1468486416723},{"_id":"public/projrct/treenode/treenode.js","hash":"54877eda0790c7af9de09f28dccc749d15ec28ef","modified":1468486416723},{"_id":"public/images/article.jpg","hash":"b1731429972273ad832fbc1337702de851f82181","modified":1468486416723},{"_id":"public/images/avatar.jpg","hash":"77c5b57042d1f3af059a0ef589657dba3419dc26","modified":1468486416723},{"_id":"public/images/icon-bubble.svg","hash":"c052a2f96808d72ef53b3f722fe832cdc3b6fc68","modified":1468486416723},{"_id":"public/images/avatar.png","hash":"2ca9ecd71c5eace855736bc60890028e994ce74d","modified":1468486416723},{"_id":"public/images/icon-heart.svg","hash":"5fe7b418079dd99223e7ca9c09f84ae810e86af4","modified":1468486416725},{"_id":"public/images/icon-categories.svg","hash":"d1c483574ba07f5c3e4573ec16c7595c7c32fa5a","modified":1468486416725},{"_id":"public/images/icon-tags.svg","hash":"983e1f59e0efb3614e70acd858c1d3d12638bb15","modified":1468486416725},{"_id":"public/images/logo.png","hash":"d65b650a670b87ba4bbaa48139d2a4489494dc79","modified":1468486416725},{"_id":"public/projrct/treenode/jquery-1.8.2.min.js","hash":"d09d3a99ed25d0f1fbe6856de9e14ffd33557256","modified":1468486416994},{"_id":"public/css/style.css","hash":"47a5635463872416f1be5b380454402173ecd18d","modified":1468486417001},{"_id":"public/css/style-2.css","hash":"fea4931e5182c66cbe1652aa59c0a44aa51abcc2","modified":1468486417001}],"Category":[{"name":"前端","_id":"ciqm2wan90003o0obir8mwkgb"}],"Data":[],"Page":[],"Post":[{"title":"Git 使用说明","date":"2016-07-11T09:09:08.000Z","_content":"git——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。 \n<!--more-->\n初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！\n![30分钟git命令入门到放弃](http://oa59b6bv6.bkt.clouddn.com/git1.webp)\n\n## learn-git\n\n### 基本了解\n\ngit命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。\n\nGit是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。\n\n\n1. 安装Git\n安装git非常直接：\n* Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：\n\n``` javascript\n$ sudo apt-get install git-all\n```\n\n* Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。\n\n* OS X - 最简单的方式是使用homebrew安装，命令行执行\n\n``` javascript\n$ brew install git\n```\n如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。\n\n2. 配置Git\n安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。\n\n``` javascript\n$ git config --global user.name \"My Name\"\n$ git config --global user.email myEmail@example.com\n```\n配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？\n\n3. 创建一个新仓库 - git init\ngit 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git \ninit。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。\n在桌面创建一个联系文件夹 git_exercise, 打开终端：\n\n``` javascript\n$ cd Desktop/git_exercise/\n$ git init\n```\nOK，现在项目还什么都没有，新建一个 hello.txt 文件试试~\n\n4. 检查状态 - git status\ngit status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n\n\thello.txt\n```\ngit 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。\n\n5. 暂存 - git add\ngit 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit \n提交。\n这个例子中只有一个文件：\n\n``` javascript\n$ git add hello.txt\n```\n如果需要提交目录下的所有内容，可以这样：\n\n``` javascript\n$ git add -A\n```\n再次使用git status查看：\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached ...\" to unstage)\n\n\tnew file:   hello.txt\n```\n我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。\n\n6. 提交 - git commit\n一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。\n创建提交，需要我们提交东西到暂存区（git add），然后：\n\n``` javascript\n$ git commit -m \"Initial commit.\"\n```\n这就创建了一次提交，-m \n“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。\n\n## 远端仓库\n到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。\n1. 链接远端仓库 - git remote add\n为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：https://github.com/tutorialzine/awesome-project,但你应该自己在Github, \nBitBucket上搭建仓库，自己一步一步尝试。\n添加测试用的远端仓库\n\n``` javascript\n$ git remote add origin https://github.com/tutorialzine/awesome-project.git\n```\n一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。\n\n2. 上传到服务器 - git push\n每次我们要提交代码到服务器上时，都会使用到git push。\ngit push命令会有两个参数，远端仓库的名字，以及分支的名字：\n\n``` javascript\n$ git push origin master\n\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 212 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tutorialzine/awesome-project.git\n * [new branch]      master -> master\n```\n取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。\n\n3. 克隆仓库 - git clone\n放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。\n\n``` javascript\n$ git clone https://github.com/tutorialzine/awesome-project.git\n```\n本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。\n\n4. 从服务器上拉取代码 - git pull\n如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：\n\n``` javascript\n$ git pull origin master\nFrom https://github.com/tutorialzine/awesome-project\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\n```\n因为暂时没有其他人提交，所有没有任何变动分支\n![branchs](http://oa59b6bv6.bkt.clouddn.com/git2.webp)\nbranchs\n\n当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：\n* 稳定版本的代码不会被破坏\n* 不同的功能可以由不同开发者同时开发。\n* 开发者可以专注于自己的分支，不用担心被其他人破坏了环境\n* 在不确定之前，同一个特性可以拥有几个版本，便于比较\n\n1. 创建新分支 - git branch\n每一个仓库的默认分支都叫master, 创建新分支可以这样：\n\n``` javascript\n$ git branch amazing_new_feature\n```\n创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点\n\n2. 切换分支 - git checkout\n单独使用git branch，可以查看分支状态：\n\n``` javascript\n$ git branch\n  amazing_new_feature\n* master\n```\n* 号表示当前活跃分支为master，使用git checkout切换分支。\n\n\n``` javascript\n$ git checkout amazing_new_feature\n```\n3. 合并分支 - git merge\n我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。\n\n``` javascript\n$ git add feature.txt\n$ git commit -m \"New feature complete.\"\n```\n新分支任务完成了，回到master分支\n\n``` javascript\n$ git checkout master\n```\n现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。\n\n``` javascript\n$ git merge amazing_new_feature\n```\nok! \n然后再把amazing_new_feature 分支删掉吧。\n\n``` javascript\n$ git branch -d amazing_new_feature\n```\n\n## 高级\n这篇文章的最后一节，我们来说些比较高级并且使用的技巧。\n1. 比对两个不同提交之间的差别\n每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git \nlog:\n\n``` javascript\n$ git log\n\ncommit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7\nAuthor: Tutorialzine\nDate:   Mon May 30 17:15:28 2016 +0300\n\n    New feature complete\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ncommit 09bd8cc171d7084e78e4d118a2346b7487dca059\nAuthor: Tutorialzine\nDate:   Sat May 28 17:52:14 2016 +0300\n\n    Initial commit\n```\nid 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:\n\n\n``` javascript\n$ git show b10cc123\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n\n查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：\n\n``` javascript\n$ git diff 09bd8cc..ba25c0ff\n\ndiff --git a/feature.txt b/feature.txt\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。\n\n2. 回滚某个文件到之前的版本\ngit 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。\n下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。\n\n``` javascript\n$ git checkout 09bd8cc1 hello.txt\n```\n\n3. 回滚提交\n如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。\n如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。\n最新的一次提交别名也叫HEAD。\n\n``` javascript\n$ git revert HEAD\n```\n\n其他提交可以使用id:\n\n``` javascript\n$ git revert b10cc123\n```\n混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。\n\n4. 解决合并冲突\n冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。\n比如John 和 Tim \n分别在各自的分支上写了两部分代码。\nJohn 喜欢 for:\n\n``` javascript\n// Use a for \nloop to console.log contents.\nfor(var i=0; i<arr.length; i++) \n{\nconsole.log(arr[i]);\n}\n```\nTim 喜欢 forEach:\n\n``` javascript\n// Use forEach \nto console.log contents.\narr.forEach(function(item) \n{\nconsole.log(item);\n});\n```\n假设John 现在去拉取 \nTim的代码:\n\n``` javascript\n$ git merge tim_branch\n\nAuto-merging print_array.js\nCONFLICT (content): Merge conflict in print_array.js\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。\n于是它就在代码中插入标记。\n\n``` javascript\n<<<<<<< HEAD\n// Use a for loop to console.log contents.\nfor(var i=0; i<arr.length; i++) {\n    console.log(arr[i]);\n}\n=======\n// Use forEach to console.log contents.\narr.forEach(function(item) {\n    console.log(item);\n});\n>>>>>>> Tim s commit.\n```\n==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。\n\n\n``` javascript\n// Not using for loop or forEach.\n// Use Array.toString() to console.log contents.\nconsole.log(arr.toString());\n```\n好了，再提交一下：\n\n``` javascript\n$ git add -A\n$ git commit -m \"Array printing conflict resolved.\"\n```\n\n如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。\n\n5. 配置 .gitignore\n大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：\n在项目根目录创建.gitignore文件\n在文件中列出不需要提交的文件名，文件夹名，每个一行\n.gitignore文件需要提交，就像普通文件一样\n通常会被ignore的文件有：\nlog文件\ntask runner \nbuilds\nnode_modules等文件夹\nIDEs生成的文件\n个人笔记\n例如：\n\n``` javascript\n*.log\nbuild/\nnode_modules/\n.idea/\nmy_notes.txt\n```\n总结\n教程结束~(撒花)\ngit有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！ \n怀挺！\n更多学习资源：\n* git 官方文档\n* git GUI工具\n* 在线创建.gitignore\n* 廖雪峰 git 教程\n* 图解git\n\n> 本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  [原文链接](http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/)\n","source":"_posts/30分钟git命令入门到放弃.md","raw":"---\ntitle: Git 使用说明\ndate: 2016-07-11 17:09:08\ntags: Git\ncategory: 前端\n---\ngit——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。 \n<!--more-->\n初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！\n![30分钟git命令入门到放弃](http://oa59b6bv6.bkt.clouddn.com/git1.webp)\n\n## learn-git\n\n### 基本了解\n\ngit命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。\n\nGit是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。\n\n\n1. 安装Git\n安装git非常直接：\n* Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：\n\n``` javascript\n$ sudo apt-get install git-all\n```\n\n* Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。\n\n* OS X - 最简单的方式是使用homebrew安装，命令行执行\n\n``` javascript\n$ brew install git\n```\n如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。\n\n2. 配置Git\n安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。\n\n``` javascript\n$ git config --global user.name \"My Name\"\n$ git config --global user.email myEmail@example.com\n```\n配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？\n\n3. 创建一个新仓库 - git init\ngit 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git \ninit。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。\n在桌面创建一个联系文件夹 git_exercise, 打开终端：\n\n``` javascript\n$ cd Desktop/git_exercise/\n$ git init\n```\nOK，现在项目还什么都没有，新建一个 hello.txt 文件试试~\n\n4. 检查状态 - git status\ngit status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n\n\thello.txt\n```\ngit 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。\n\n5. 暂存 - git add\ngit 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit \n提交。\n这个例子中只有一个文件：\n\n``` javascript\n$ git add hello.txt\n```\n如果需要提交目录下的所有内容，可以这样：\n\n``` javascript\n$ git add -A\n```\n再次使用git status查看：\n\n``` javascript\n$ git status\n\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached ...\" to unstage)\n\n\tnew file:   hello.txt\n```\n我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。\n\n6. 提交 - git commit\n一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。\n创建提交，需要我们提交东西到暂存区（git add），然后：\n\n``` javascript\n$ git commit -m \"Initial commit.\"\n```\n这就创建了一次提交，-m \n“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。\n\n## 远端仓库\n到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。\n1. 链接远端仓库 - git remote add\n为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：https://github.com/tutorialzine/awesome-project,但你应该自己在Github, \nBitBucket上搭建仓库，自己一步一步尝试。\n添加测试用的远端仓库\n\n``` javascript\n$ git remote add origin https://github.com/tutorialzine/awesome-project.git\n```\n一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。\n\n2. 上传到服务器 - git push\n每次我们要提交代码到服务器上时，都会使用到git push。\ngit push命令会有两个参数，远端仓库的名字，以及分支的名字：\n\n``` javascript\n$ git push origin master\n\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 212 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tutorialzine/awesome-project.git\n * [new branch]      master -> master\n```\n取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。\n\n3. 克隆仓库 - git clone\n放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。\n\n``` javascript\n$ git clone https://github.com/tutorialzine/awesome-project.git\n```\n本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。\n\n4. 从服务器上拉取代码 - git pull\n如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：\n\n``` javascript\n$ git pull origin master\nFrom https://github.com/tutorialzine/awesome-project\n * branch            master     -> FETCH_HEAD\nAlready up-to-date.\n```\n因为暂时没有其他人提交，所有没有任何变动分支\n![branchs](http://oa59b6bv6.bkt.clouddn.com/git2.webp)\nbranchs\n\n当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：\n* 稳定版本的代码不会被破坏\n* 不同的功能可以由不同开发者同时开发。\n* 开发者可以专注于自己的分支，不用担心被其他人破坏了环境\n* 在不确定之前，同一个特性可以拥有几个版本，便于比较\n\n1. 创建新分支 - git branch\n每一个仓库的默认分支都叫master, 创建新分支可以这样：\n\n``` javascript\n$ git branch amazing_new_feature\n```\n创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点\n\n2. 切换分支 - git checkout\n单独使用git branch，可以查看分支状态：\n\n``` javascript\n$ git branch\n  amazing_new_feature\n* master\n```\n* 号表示当前活跃分支为master，使用git checkout切换分支。\n\n\n``` javascript\n$ git checkout amazing_new_feature\n```\n3. 合并分支 - git merge\n我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。\n\n``` javascript\n$ git add feature.txt\n$ git commit -m \"New feature complete.\"\n```\n新分支任务完成了，回到master分支\n\n``` javascript\n$ git checkout master\n```\n现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。\n\n``` javascript\n$ git merge amazing_new_feature\n```\nok! \n然后再把amazing_new_feature 分支删掉吧。\n\n``` javascript\n$ git branch -d amazing_new_feature\n```\n\n## 高级\n这篇文章的最后一节，我们来说些比较高级并且使用的技巧。\n1. 比对两个不同提交之间的差别\n每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git \nlog:\n\n``` javascript\n$ git log\n\ncommit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7\nAuthor: Tutorialzine\nDate:   Mon May 30 17:15:28 2016 +0300\n\n    New feature complete\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ncommit 09bd8cc171d7084e78e4d118a2346b7487dca059\nAuthor: Tutorialzine\nDate:   Sat May 28 17:52:14 2016 +0300\n\n    Initial commit\n```\nid 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:\n\n\n``` javascript\n$ git show b10cc123\n\ncommit b10cc1238e355c02a044ef9f9860811ff605c9b4\nAuthor: Tutorialzine\nDate:   Mon May 30 16:30:04 2016 +0300\n\n    Added content to hello.txt\n\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n\n查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：\n\n``` javascript\n$ git diff 09bd8cc..ba25c0ff\n\ndiff --git a/feature.txt b/feature.txt\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/hello.txt b/hello.txt\nindex e69de29..b546a21 100644\n--- a/hello.txt\n+++ b/hello.txt\n@@ -0,0 +1 @@\n+Nice weather today, isn't it?\n```\n比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。\n\n2. 回滚某个文件到之前的版本\ngit 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。\n下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。\n\n``` javascript\n$ git checkout 09bd8cc1 hello.txt\n```\n\n3. 回滚提交\n如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。\n如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。\n最新的一次提交别名也叫HEAD。\n\n``` javascript\n$ git revert HEAD\n```\n\n其他提交可以使用id:\n\n``` javascript\n$ git revert b10cc123\n```\n混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。\n\n4. 解决合并冲突\n冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。\n比如John 和 Tim \n分别在各自的分支上写了两部分代码。\nJohn 喜欢 for:\n\n``` javascript\n// Use a for \nloop to console.log contents.\nfor(var i=0; i<arr.length; i++) \n{\nconsole.log(arr[i]);\n}\n```\nTim 喜欢 forEach:\n\n``` javascript\n// Use forEach \nto console.log contents.\narr.forEach(function(item) \n{\nconsole.log(item);\n});\n```\n假设John 现在去拉取 \nTim的代码:\n\n``` javascript\n$ git merge tim_branch\n\nAuto-merging print_array.js\nCONFLICT (content): Merge conflict in print_array.js\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。\n于是它就在代码中插入标记。\n\n``` javascript\n<<<<<<< HEAD\n// Use a for loop to console.log contents.\nfor(var i=0; i<arr.length; i++) {\n    console.log(arr[i]);\n}\n=======\n// Use forEach to console.log contents.\narr.forEach(function(item) {\n    console.log(item);\n});\n>>>>>>> Tim s commit.\n```\n==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。\n\n\n``` javascript\n// Not using for loop or forEach.\n// Use Array.toString() to console.log contents.\nconsole.log(arr.toString());\n```\n好了，再提交一下：\n\n``` javascript\n$ git add -A\n$ git commit -m \"Array printing conflict resolved.\"\n```\n\n如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。\n\n5. 配置 .gitignore\n大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：\n在项目根目录创建.gitignore文件\n在文件中列出不需要提交的文件名，文件夹名，每个一行\n.gitignore文件需要提交，就像普通文件一样\n通常会被ignore的文件有：\nlog文件\ntask runner \nbuilds\nnode_modules等文件夹\nIDEs生成的文件\n个人笔记\n例如：\n\n``` javascript\n*.log\nbuild/\nnode_modules/\n.idea/\nmy_notes.txt\n```\n总结\n教程结束~(撒花)\ngit有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！ \n怀挺！\n更多学习资源：\n* git 官方文档\n* git GUI工具\n* 在线创建.gitignore\n* 廖雪峰 git 教程\n* 图解git\n\n> 本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  [原文链接](http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/)\n","slug":"30分钟git命令入门到放弃","published":1,"updated":"2016-07-14T03:20:55.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqm2wan10000o0obd2lk5nwh","content":"<p>git——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。<br><a id=\"more\"></a><br>初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git1.webp\" alt=\"30分钟git命令入门到放弃\"></p>\n<h2 id=\"learn-git\"><a href=\"#learn-git\" class=\"headerlink\" title=\"learn-git\"></a>learn-git</h2><h3 id=\"基本了解\"><a href=\"#基本了解\" class=\"headerlink\" title=\"基本了解\"></a>基本了解</h3><p>git命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。</p>\n<p>Git是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。</p>\n<ol>\n<li>安装Git<br>安装git非常直接：</li>\n</ol>\n<ul>\n<li>Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git-all</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。</p>\n</li>\n<li><p>OS X - 最简单的方式是使用homebrew安装，命令行执行</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install git</div></pre></td></tr></table></figure>\n<p>如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。</p>\n<ol>\n<li>配置Git<br>安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"My Name\"</span></div><div class=\"line\">$ git config --global user.email myEmail@example.com</div></pre></td></tr></table></figure>\n<p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p>\n<ol>\n<li>创建一个新仓库 - git init<br>git 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git<br>init。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。<br>在桌面创建一个联系文件夹 git_exercise, 打开终端：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd Desktop/git_exercise/</div><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p>OK，现在项目还什么都没有，新建一个 hello.txt 文件试试~</p>\n<ol>\n<li>检查状态 - git status<br>git status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add ...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">\thello.txt</div></pre></td></tr></table></figure>\n<p>git 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。</p>\n<ol>\n<li>暂存 - git add<br>git 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit<br>提交。<br>这个例子中只有一个文件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add hello.txt</div></pre></td></tr></table></figure>\n<p>如果需要提交目录下的所有内容，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure>\n<p>再次使用git status查看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git rm --cached ...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">new</span> file:   hello.txt</div></pre></td></tr></table></figure>\n<p>我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。</p>\n<ol>\n<li>提交 - git commit<br>一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。<br>创建提交，需要我们提交东西到暂存区（git add），然后：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"Initial commit.\"</span></div></pre></td></tr></table></figure>\n<p>这就创建了一次提交，-m<br>“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。</p>\n<h2 id=\"远端仓库\"><a href=\"#远端仓库\" class=\"headerlink\" title=\"远端仓库\"></a>远端仓库</h2><p>到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。</p>\n<ol>\n<li>链接远端仓库 - git remote add<br>为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：<a href=\"https://github.com/tutorialzine/awesome-project,但你应该自己在Github\" target=\"_blank\" rel=\"external\">https://github.com/tutorialzine/awesome-project,但你应该自己在Github</a>,<br>BitBucket上搭建仓库，自己一步一步尝试。<br>添加测试用的远端仓库</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。</p>\n<ol>\n<li>上传到服务器 - git push<br>每次我们要提交代码到服务器上时，都会使用到git push。<br>git push命令会有两个参数，远端仓库的名字，以及分支的名字：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div><div class=\"line\"></div><div class=\"line\">Counting objects: <span class=\"number\">3</span>, done.</div><div class=\"line\">Writing objects: <span class=\"number\">100</span>% (<span class=\"number\">3</span>/<span class=\"number\">3</span>), <span class=\"number\">212</span> bytes | <span class=\"number\">0</span> bytes/s, done.</div><div class=\"line\">Total <span class=\"number\">3</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</div><div class=\"line\">To https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div><div class=\"line\"> * [<span class=\"keyword\">new</span> branch]      master -&gt; master</div></pre></td></tr></table></figure>\n<p>取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。</p>\n<ol>\n<li>克隆仓库 - git clone<br>放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。</p>\n<ol>\n<li>从服务器上拉取代码 - git pull<br>如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div><div class=\"line\">From https:<span class=\"comment\">//github.com/tutorialzine/awesome-project</span></div><div class=\"line\"> * branch            master     -&gt; FETCH_HEAD</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure>\n<p>因为暂时没有其他人提交，所有没有任何变动分支<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git2.webp\" alt=\"branchs\"><br>branchs</p>\n<p>当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：</p>\n<ul>\n<li>稳定版本的代码不会被破坏</li>\n<li>不同的功能可以由不同开发者同时开发。</li>\n<li>开发者可以专注于自己的分支，不用担心被其他人破坏了环境</li>\n<li>在不确定之前，同一个特性可以拥有几个版本，便于比较</li>\n</ul>\n<ol>\n<li>创建新分支 - git branch<br>每一个仓库的默认分支都叫master, 创建新分支可以这样：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch amazing_new_feature</div></pre></td></tr></table></figure>\n<p>创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点</p>\n<ol>\n<li>切换分支 - git checkout<br>单独使用git branch，可以查看分支状态：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\">  amazing_new_feature</div><div class=\"line\">* master</div></pre></td></tr></table></figure>\n<ul>\n<li>号表示当前活跃分支为master，使用git checkout切换分支。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout amazing_new_feature</div></pre></td></tr></table></figure>\n<ol>\n<li>合并分支 - git merge<br>我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add feature.txt</div><div class=\"line\">$ git commit -m <span class=\"string\">\"New feature complete.\"</span></div></pre></td></tr></table></figure>\n<p>新分支任务完成了，回到master分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<p>现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge amazing_new_feature</div></pre></td></tr></table></figure>\n<p>ok!<br>然后再把amazing_new_feature 分支删掉吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d amazing_new_feature</div></pre></td></tr></table></figure>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p>这篇文章的最后一节，我们来说些比较高级并且使用的技巧。</p>\n<ol>\n<li>比对两个不同提交之间的差别<br>每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git<br>log:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div><div class=\"line\"></div><div class=\"line\">commit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">17</span>:<span class=\"number\">15</span>:<span class=\"number\">28</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    New feature complete</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">commit <span class=\"number\">09</span>bd8cc171d7084e78e4d118a2346b7487dca059</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Sat May <span class=\"number\">28</span> <span class=\"number\">17</span>:<span class=\"number\">52</span>:<span class=\"number\">14</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Initial commit</div></pre></td></tr></table></figure>\n<p>id 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git show b10cc123</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff <span class=\"number\">09</span>bd8cc..ba25c0ff</div><div class=\"line\"></div><div class=\"line\">diff --git a/feature.txt b/feature.txt</div><div class=\"line\"><span class=\"keyword\">new</span> file mode <span class=\"number\">100644</span></div><div class=\"line\">index <span class=\"number\">0000000.</span>.e69de29</div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。</p>\n<ol>\n<li>回滚某个文件到之前的版本<br>git 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。<br>下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout <span class=\"number\">09</span>bd8cc1 hello.txt</div></pre></td></tr></table></figure>\n<ol>\n<li>回滚提交<br>如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。<br>如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。<br>最新的一次提交别名也叫HEAD。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert HEAD</div></pre></td></tr></table></figure>\n<p>其他提交可以使用id:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert b10cc123</div></pre></td></tr></table></figure>\n<p>混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。</p>\n<ol>\n<li>解决合并冲突<br>冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。<br>比如John 和 Tim<br>分别在各自的分支上写了两部分代码。<br>John 喜欢 for:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use a for </span></div><div class=\"line\">loop to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">for(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) </div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Tim 喜欢 forEach:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use forEach </span></div><div class=\"line\">to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>假设John 现在去拉取<br>Tim的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge tim_branch</div><div class=\"line\"></div><div class=\"line\">Auto-merging print_array.js</div><div class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> print_array.js</div><div class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n<p>这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。<br>于是它就在代码中插入标记。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">// Use a for loop to console.log contents.</div><div class=\"line\">for(var i=0; i&lt;arr.length; i++) &#123;</div><div class=\"line\">    console.log(arr[i]);</div><div class=\"line\">&#125;</div><div class=\"line\">=======</div><div class=\"line\">// Use forEach to console.log contents.</div><div class=\"line\">arr.forEach(function(item) &#123;</div><div class=\"line\">    console.log(item);</div><div class=\"line\">&#125;);</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Tim s commit.</div></pre></td></tr></table></figure>\n<p>==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Not using for loop or forEach.</span></div><div class=\"line\"><span class=\"comment\">// Use Array.toString() to console.log contents.</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString());</div></pre></td></tr></table></figure>\n<p>好了，再提交一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div><div class=\"line\">$ git commit -m <span class=\"string\">\"Array printing conflict resolved.\"</span></div></pre></td></tr></table></figure>\n<p>如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。</p>\n<ol>\n<li>配置 .gitignore<br>大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：<br>在项目根目录创建.gitignore文件<br>在文件中列出不需要提交的文件名，文件夹名，每个一行<br>.gitignore文件需要提交，就像普通文件一样<br>通常会被ignore的文件有：<br>log文件<br>task runner<br>builds<br>node_modules等文件夹<br>IDEs生成的文件<br>个人笔记<br>例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.log</div><div class=\"line\">build/</div><div class=\"line\">node_modules/</div><div class=\"line\">.idea/</div><div class=\"line\">my_notes.txt</div></pre></td></tr></table></figure>\n<p>总结<br>教程结束~(撒花)<br>git有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！<br>怀挺！<br>更多学习资源：</p>\n<ul>\n<li>git 官方文档</li>\n<li>git GUI工具</li>\n<li>在线创建.gitignore</li>\n<li>廖雪峰 git 教程</li>\n<li>图解git</li>\n</ul>\n<blockquote>\n<p>本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  <a href=\"http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n</blockquote>\n","excerpt":"<p>git——现在的火爆程度非同一般，它被广泛地用在大型开源项目，团队开发，以及独立开发者，甚至学生之中。<br>","more":"<br>初学者非常容易被各种命令，参数吓哭。但实际上刚上手你并不需要了解所有命令的用途。你可以从掌握一些简单，强大的命令开始，逐步去学习。（这就是这篇文章要讲的）。好了，上来！<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git1.webp\" alt=\"30分钟git命令入门到放弃\"></p>\n<h2 id=\"learn-git\"><a href=\"#learn-git\" class=\"headerlink\" title=\"learn-git\"></a>learn-git</h2><h3 id=\"基本了解\"><a href=\"#基本了解\" class=\"headerlink\" title=\"基本了解\"></a>基本了解</h3><p>git命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等。这个过程被称之为版本控制。已经有一系列的版本控制系统，比如SVN, Mercurial, Perforce, CVS, Bitkeepe等等。</p>\n<p>Git是分布式的，这意味着它并不依赖于中心服务器，任何一台机器都可以有一个本地版本的控制系统，我们称之为仓库。如果是多人协作的话，你需要还需要一个线上仓库，用来同步信息。这就是GitHub, BitBucket的工作。</p>\n<ol>\n<li>安装Git<br>安装git非常直接：</li>\n</ol>\n<ul>\n<li>Linux - 打开控制台，然后通过包管理安装，在Ubuntu上命令是：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git-all</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Windows - 推荐使用git for windows，它包括了图形工具以及命令行模拟器。</p>\n</li>\n<li><p>OS X - 最简单的方式是使用homebrew安装，命令行执行</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install git</div></pre></td></tr></table></figure>\n<p>如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。</p>\n<ol>\n<li>配置Git<br>安装完git,首要任务是配置我们的信息，最重要的是用户名及邮箱，打开终端，执行以下命令。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"My Name\"</span></div><div class=\"line\">$ git config --global user.email myEmail@example.com</div></pre></td></tr></table></figure>\n<p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p>\n<ol>\n<li>创建一个新仓库 - git init<br>git 会把所有文件以及历史记录保存在你的项目中，创建一个新的仓库，首先要去到项目路径，执行 git<br>init。然后git会创建一个隐藏的文件夹.git，所有的信息都储存在其中。<br>在桌面创建一个联系文件夹 git_exercise, 打开终端：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd Desktop/git_exercise/</div><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p>OK，现在项目还什么都没有，新建一个 hello.txt 文件试试~</p>\n<ol>\n<li>检查状态 - git status<br>git status 是另一个非常重要的命令，它会告诉我们创库的当前状态：是否为最新代码，有什么更新等等执行git status:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add ...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">\thello.txt</div></pre></td></tr></table></figure>\n<p>git 告诉我们，hello.txt尚未跟踪，这是因为这个文件是新的，git不知道是应该跟踪它的变动呢，还是直接忽略不管呢。为了跟踪我们的新文件，我们需要暂存它。</p>\n<ol>\n<li>暂存 - git add<br>git 有个概念叫暂存区，你可以把它看成一块空白帆布，包裹着所有你可能会提交的变动。它一开始为空，你可以通过 git add 命令添加内容，并使用 git commit<br>提交。<br>这个例子中只有一个文件：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add hello.txt</div></pre></td></tr></table></figure>\n<p>如果需要提交目录下的所有内容，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure>\n<p>再次使用git status查看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git rm --cached ...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">new</span> file:   hello.txt</div></pre></td></tr></table></figure>\n<p>我们的文件已经提交了。状态信息还会告诉我们暂存区文件发生了什么变动，不过这里我们提交的是一个全新文件。</p>\n<ol>\n<li>提交 - git commit<br>一次提交代表着我们的仓库到了一个交付状态，通常是完成了某一块小功能。它就像是一个快照，允许我们像使用时光机一样回到旧时光。<br>创建提交，需要我们提交东西到暂存区（git add），然后：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"Initial commit.\"</span></div></pre></td></tr></table></figure>\n<p>这就创建了一次提交，-m<br>“Initial commit.”表示对这次提交的描述，建议使用有意义的描述性信息。</p>\n<h2 id=\"远端仓库\"><a href=\"#远端仓库\" class=\"headerlink\" title=\"远端仓库\"></a>远端仓库</h2><p>到目前为止，我们的操作都是在本地的，它存在于.git文件中。为了能够协同开发，我们需要把代码发布到远端仓库上。</p>\n<ol>\n<li>链接远端仓库 - git remote add<br>为了能够上传到远端仓库，我们需要先建立起链接，这篇教程中，远端仓库的地址为：<a href=\"https://github.com/tutorialzine/awesome-project,但你应该自己在Github\">https://github.com/tutorialzine/awesome-project,但你应该自己在Github</a>,<br>BitBucket上搭建仓库，自己一步一步尝试。<br>添加测试用的远端仓库</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>一个项目可以同时拥有好几个远端仓库为了能够区分，通常会起不同的名字。通常主远端仓库被称为origin。</p>\n<ol>\n<li>上传到服务器 - git push<br>每次我们要提交代码到服务器上时，都会使用到git push。<br>git push命令会有两个参数，远端仓库的名字，以及分支的名字：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div><div class=\"line\"></div><div class=\"line\">Counting objects: <span class=\"number\">3</span>, done.</div><div class=\"line\">Writing objects: <span class=\"number\">100</span>% (<span class=\"number\">3</span>/<span class=\"number\">3</span>), <span class=\"number\">212</span> bytes | <span class=\"number\">0</span> bytes/s, done.</div><div class=\"line\">Total <span class=\"number\">3</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</div><div class=\"line\">To https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div><div class=\"line\"> * [<span class=\"keyword\">new</span> branch]      master -&gt; master</div></pre></td></tr></table></figure>\n<p>取决于你使用的服务器，push过程你可能需要验证身份。如果没有出差错，现在使用浏览器去你的远端分支上看，hello.txt已经在那里等着你了。</p>\n<ol>\n<li>克隆仓库 - git clone<br>放在Github上的开源项目，人们可以看到你的代码。可以使用 git clone进行下载到本地。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https:<span class=\"comment\">//github.com/tutorialzine/awesome-project.git</span></div></pre></td></tr></table></figure>\n<p>本地也会创建一个新的仓库，并自动将github上的分支设为远端分支。</p>\n<ol>\n<li>从服务器上拉取代码 - git pull<br>如果你更新了代码到仓库上，其他人可以通过git pull命令拉取你的变动：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div><div class=\"line\">From https:<span class=\"comment\">//github.com/tutorialzine/awesome-project</span></div><div class=\"line\"> * branch            master     -&gt; FETCH_HEAD</div><div class=\"line\">Already up-to-date.</div></pre></td></tr></table></figure>\n<p>因为暂时没有其他人提交，所有没有任何变动分支<br><img src=\"http://oa59b6bv6.bkt.clouddn.com/git2.webp\" alt=\"branchs\"><br>branchs</p>\n<p>当你在做一个新功能的时候，最好是在一个独立的区域上开发，通常称之为分支。分支之间相互独立，并且拥有自己的历史记录。这样做的原因是：</p>\n<ul>\n<li>稳定版本的代码不会被破坏</li>\n<li>不同的功能可以由不同开发者同时开发。</li>\n<li>开发者可以专注于自己的分支，不用担心被其他人破坏了环境</li>\n<li>在不确定之前，同一个特性可以拥有几个版本，便于比较</li>\n</ul>\n<ol>\n<li>创建新分支 - git branch<br>每一个仓库的默认分支都叫master, 创建新分支可以这样：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch amazing_new_feature</div></pre></td></tr></table></figure>\n<p>创建了一个名为amazing_new_feature的新分支，它跟当前分支同一起点</p>\n<ol>\n<li>切换分支 - git checkout<br>单独使用git branch，可以查看分支状态：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\">  amazing_new_feature</div><div class=\"line\">* master</div></pre></td></tr></table></figure>\n<ul>\n<li>号表示当前活跃分支为master，使用git checkout切换分支。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout amazing_new_feature</div></pre></td></tr></table></figure>\n<ol>\n<li>合并分支 - git merge<br>我们的amazing_new_feature 分支的任务是增加一个featuer.txt。我们来创建，添加到暂存区，提交。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add feature.txt</div><div class=\"line\">$ git commit -m <span class=\"string\">\"New feature complete.\"</span></div></pre></td></tr></table></figure>\n<p>新分支任务完成了，回到master分支</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<p>现在去查看文件，你会发现，之前创建的feature.txt文件不见了，因为master分支上并没有feature.txt。使用git merge 把 amazing_new_feature 分支合并到master上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge amazing_new_feature</div></pre></td></tr></table></figure>\n<p>ok!<br>然后再把amazing_new_feature 分支删掉吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d amazing_new_feature</div></pre></td></tr></table></figure>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p>这篇文章的最后一节，我们来说些比较高级并且使用的技巧。</p>\n<ol>\n<li>比对两个不同提交之间的差别<br>每次提交都有一个唯一id，查看所有提交和他们的id，可以使用 git<br>log:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div><div class=\"line\"></div><div class=\"line\">commit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">17</span>:<span class=\"number\">15</span>:<span class=\"number\">28</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    New feature complete</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">commit <span class=\"number\">09</span>bd8cc171d7084e78e4d118a2346b7487dca059</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Sat May <span class=\"number\">28</span> <span class=\"number\">17</span>:<span class=\"number\">52</span>:<span class=\"number\">14</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Initial commit</div></pre></td></tr></table></figure>\n<p>id 很长，但是你并不需要复制整个字符串，前一小部分就够了。查看某一次提交更新了什么，使用 git show:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git show b10cc123</div><div class=\"line\"></div><div class=\"line\">commit b10cc1238e355c02a044ef9f9860811ff605c9b4</div><div class=\"line\">Author: Tutorialzine</div><div class=\"line\"><span class=\"built_in\">Date</span>:   Mon May <span class=\"number\">30</span> <span class=\"number\">16</span>:<span class=\"number\">30</span>:<span class=\"number\">04</span> <span class=\"number\">2016</span> +<span class=\"number\">0300</span></div><div class=\"line\"></div><div class=\"line\">    Added content to hello.txt</div><div class=\"line\"></div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>查看两次提交的不同，可以使用git diff [commit-from]..[commit-to] 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff <span class=\"number\">09</span>bd8cc..ba25c0ff</div><div class=\"line\"></div><div class=\"line\">diff --git a/feature.txt b/feature.txt</div><div class=\"line\"><span class=\"keyword\">new</span> file mode <span class=\"number\">100644</span></div><div class=\"line\">index <span class=\"number\">0000000.</span>.e69de29</div><div class=\"line\">diff --git a/hello.txt b/hello.txt</div><div class=\"line\">index e69de29..b546a21 <span class=\"number\">100644</span></div><div class=\"line\">--- a/hello.txt</div><div class=\"line\">+++ b/hello.txt</div><div class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</div><div class=\"line\">+Nice weather today, isn<span class=\"string\">'t it?</span></div></pre></td></tr></table></figure>\n<p>比较首次提交和最后一次提交，我们可以看到所有的更改。当然使用git difftool命令更加方便。</p>\n<ol>\n<li>回滚某个文件到之前的版本<br>git 允许我们将某个特定的文件回滚到特定的提交，使用的也是 git checkout。<br>下面的例子，我们将hello.txt回滚到最初的状态，需要指定回滚到哪个提交，以及文件的全路径。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout <span class=\"number\">09</span>bd8cc1 hello.txt</div></pre></td></tr></table></figure>\n<ol>\n<li>回滚提交<br>如果你发现最新的一次提交完了加某个文件，你可以通过 git commit —amend来修复，它会把最新的提交打回暂存区，并尝试重新提交。<br>如果是更复杂的情况，比如不是最新的提交了。那你可以使用git revert。<br>最新的一次提交别名也叫HEAD。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert HEAD</div></pre></td></tr></table></figure>\n<p>其他提交可以使用id:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert b10cc123</div></pre></td></tr></table></figure>\n<p>混滚提交时，发生冲突是非常频繁的。当文件被后面的提交修改了以后，git不能正确回滚。</p>\n<ol>\n<li>解决合并冲突<br>冲突经常出现在合并分支或者是拉去别人的代码。有些时候git能自动处理冲突，但大部分需要我们手动处理。<br>比如John 和 Tim<br>分别在各自的分支上写了两部分代码。<br>John 喜欢 for:</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use a for </span></div><div class=\"line\">loop to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">for(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) </div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Tim 喜欢 forEach:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Use forEach </span></div><div class=\"line\">to <span class=\"built_in\">console</span>.log contents.</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>假设John 现在去拉取<br>Tim的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge tim_branch</div><div class=\"line\"></div><div class=\"line\">Auto-merging print_array.js</div><div class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> print_array.js</div><div class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>\n<p>这时候git并不知道如何解决冲突，因为他不知道John和Tim谁写得更好。<br>于是它就在代码中插入标记。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">// Use a for loop to console.log contents.</div><div class=\"line\">for(var i=0; i&lt;arr.length; i++) &#123;</div><div class=\"line\">    console.log(arr[i]);</div><div class=\"line\">&#125;</div><div class=\"line\">=======</div><div class=\"line\">// Use forEach to console.log contents.</div><div class=\"line\">arr.forEach(function(item) &#123;</div><div class=\"line\">    console.log(item);</div><div class=\"line\">&#125;);</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Tim s commit.</div></pre></td></tr></table></figure>\n<p>==== 号上方是当前最新一次提交，下方是冲突的代码。我们需要解决这样的冲突，经过组委会成员讨论，一致认定，在座的各位都是垃圾！两个都不要。改成下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Not using for loop or forEach.</span></div><div class=\"line\"><span class=\"comment\">// Use Array.toString() to console.log contents.</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString());</div></pre></td></tr></table></figure>\n<p>好了，再提交一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div><div class=\"line\">$ git commit -m <span class=\"string\">\"Array printing conflict resolved.\"</span></div></pre></td></tr></table></figure>\n<p>如果在大型项目中，这个过程可能容易出问题。你可以使用GUI 工具来帮助你。使用 git mergetool。</p>\n<ol>\n<li>配置 .gitignore<br>大部分项目中，会有写文件，文件夹是我们不想提交的。为了防止一不小心提交，我们需要gitignore文件：<br>在项目根目录创建.gitignore文件<br>在文件中列出不需要提交的文件名，文件夹名，每个一行<br>.gitignore文件需要提交，就像普通文件一样<br>通常会被ignore的文件有：<br>log文件<br>task runner<br>builds<br>node_modules等文件夹<br>IDEs生成的文件<br>个人笔记<br>例如：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.log</div><div class=\"line\">build/</div><div class=\"line\">node_modules/</div><div class=\"line\">.idea/</div><div class=\"line\">my_notes.txt</div></pre></td></tr></table></figure>\n<p>总结<br>教程结束~(撒花)<br>git有点复杂，并且有一大堆特性和技巧等着你去挖掘，这篇文章只是提供冰山一角，希望你不要因为太多繁琐的命令而停下前进的脚步！<br>怀挺！<br>更多学习资源：</p>\n<ul>\n<li>git 官方文档</li>\n<li>git GUI工具</li>\n<li>在线创建.gitignore</li>\n<li>廖雪峰 git 教程</li>\n<li>图解git</li>\n</ul>\n<blockquote>\n<p>本文根据@Danny Markov的文章所译。英文出处：Learn Git in 30 Minutes  <a href=\"http://w3ctrain.com/2016/06/26/learn-git-in-30-minutes/\">原文链接</a></p>\n</blockquote>"},{"title":"如何使用Gulp构建项目","date":"2016-07-14T02:06:16.000Z","_content":"[Gulp](http://gulpjs.com/) 是一个自动化工具，前端开发者可以使用它来处理常见任务：\n搭建web服务器;文件保存时自动重载浏览器;使用预处理器如Sass、LESS;优化资源，比如压缩CSS、JavaScript、压缩图片等。\n<!--more-->\n## 安装\n使用Terminal(终端，win下是cmd)用下面命令安装Gulp\n```\n$ sudo npm install gulp -g\n```\n\n## 创建Gulp项目\n新建一个project文件夹，并在该目录下执行npm init命令：\n```\n$ npm init\n```\n\n---未完待续---\n\n","source":"_posts/如何使用Gulp构建项目.md","raw":"---\ntitle: 如何使用Gulp构建项目\ndate: 2016-07-14 10:06:16\ntags: Gulp\ncategory: 前端\n---\n[Gulp](http://gulpjs.com/) 是一个自动化工具，前端开发者可以使用它来处理常见任务：\n搭建web服务器;文件保存时自动重载浏览器;使用预处理器如Sass、LESS;优化资源，比如压缩CSS、JavaScript、压缩图片等。\n<!--more-->\n## 安装\n使用Terminal(终端，win下是cmd)用下面命令安装Gulp\n```\n$ sudo npm install gulp -g\n```\n\n## 创建Gulp项目\n新建一个project文件夹，并在该目录下执行npm init命令：\n```\n$ npm init\n```\n\n---未完待续---\n\n","slug":"如何使用Gulp构建项目","published":1,"updated":"2016-07-14T03:30:55.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqm2wan50001o0objn03ppme","content":"<p><a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"external\">Gulp</a> 是一个自动化工具，前端开发者可以使用它来处理常见任务：<br>搭建web服务器;文件保存时自动重载浏览器;使用预处理器如Sass、LESS;优化资源，比如压缩CSS、JavaScript、压缩图片等。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用Terminal(终端，win下是cmd)用下面命令安装Gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install gulp -g</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建Gulp项目\"><a href=\"#创建Gulp项目\" class=\"headerlink\" title=\"创建Gulp项目\"></a>创建Gulp项目</h2><p>新建一个project文件夹，并在该目录下执行npm init命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm init</div></pre></td></tr></table></figure></p>\n<p>—未完待续—</p>\n","excerpt":"<p><a href=\"http://gulpjs.com/\">Gulp</a> 是一个自动化工具，前端开发者可以使用它来处理常见任务：<br>搭建web服务器;文件保存时自动重载浏览器;使用预处理器如Sass、LESS;优化资源，比如压缩CSS、JavaScript、压缩图片等。<br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用Terminal(终端，win下是cmd)用下面命令安装Gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install gulp -g</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建Gulp项目\"><a href=\"#创建Gulp项目\" class=\"headerlink\" title=\"创建Gulp项目\"></a>创建Gulp项目</h2><p>新建一个project文件夹，并在该目录下执行npm init命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm init</div></pre></td></tr></table></figure></p>\n<p>—未完待续—</p>"},{"title":"Git 的安装和使用","date":"2016-07-14T02:46:06.000Z","_content":"Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。\n<!--more-->\n## 安装\n在windows下安装git比较常用的有以下几种方式：\n* [Git 官方版本的安装](http://git-scm.com/download/win)\n* [GitHub for Windows](https://desktop.github.com/)\n* [TortoiseGit  1.8.12.0-64](http://cdn.github.cheris.com.cn/file/git/TortoiseGit-1.8.12.0-64bit.msi)(点击直接下载)\n* [TortoiseGit-LanguagePack-zh_CN  1.8.12.0-64](http://cdn.github.cheris.com.cn/file/git/TortoiseGit-LanguagePack-1.8.12.0-64bit-zh_CN.msi)(点击直接下载)\n\n## 配置\n当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：\n``` bash\n git config --global user.name \"username\"\n$ git config --global user.email \"username@example.com\"\n```\n对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:\n1. 在GitHub右上方点击你的头像，选择”Settings”；\n2. 在右边的”Personal settings”侧边栏选择”Emails”；\n3. 选择”Keep my email address private”。\n\n这样，你就可以使用如下格式的email进行配置：\n``` bash\n$ git config --global user.email \"username@users.noreply.github.com\"\n```\n\n![git速查表](http://cdn.github.cheris.com.cn/images/github/20140730150425_610.jpg) \n![git常用命令](http://cdn.github.cheris.com.cn/images/github/git%E9%80%9F%E6%9F%A5%E8%A1%A8.png)\n## 创建\n复制一个已创建的仓库:\n``` bash\n$ git clone git@github.com:example/example.github.io.git\n```\n\n创建一个新的本地仓库:\n``` bash\n$ git init\n```\n\n## 本地修改\n显示工作路径下已修改的文件：\n``` bash\n$ git status\n```\n\n显示与上次提交版本文件的不同：\n``` bash\n$ git diff\n```\n\n把当前所有修改添加到下次提交中：\n``` bash\n$ git add\n```\n\n把对某个文件的修改添加到下次提交中：\n``` bash\n$ git add -p <file>\n```\n\n提交本地的所有修改：\n``` bash\n$ git commit -a\n```\n\n提交之前已标记的变化：\n``` bash\n$ git commit\n```\n\n附加消息提交：\n``` bash\n$ git commit -m 'message here'\n```\n\n提交，并将提交时间设置为之前的某个日期:\n``` bash\ngit commit --date=\"`date --date='n day ago'`\" -am \"Commit Message\"\n```\n\n修改上次提交\n请勿修改已发布的提交记录!\n``` bash\n$ git commit --amend\n```\n\n把当前分支中未提交的修改移动到其他分支\n``` bash\ngit stash\ngit checkout branch2\ngit stash pop\n```\n## 搜索\n从当前目录的所有文件中查找文本内容：\n``` bash\n$ git grep \"Hello\"\n```\n\n在某一版本中搜索文本：\n``` bash\n$ git grep \"Hello\" v2.5\n```\n\n## 提交历史\n从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：\n``` bash\n$ git log\n```\n\n显示所有提交（仅显示提交的hash和message）：\n``` bash\n$ git log --oneline\n```\n\n显示某个用户的所有提交：\n``` bash\n$ git log --author=\"username\"\n```\n\n显示某个文件的所有修改：\n``` bash\n$ git log -p <file>\n```\n\n谁，在什么时间，修改了文件的什么内容：\n``` bash\n$ git blame <file>\n```\n\n#分支与标签\n列出所有的分支：\n``` bash\n$ git branch\n```\n\n切换分支：\n``` bash\n$ git checkout <branch>\n```\n\n创建并切换到新分支:\n``` bash\n$ git checkout -b <branch>\n```\n\n基于当前分支创建新分支：\n``` bash\n$ git branch <new-branch>\n```\n\n基于远程分支创建新的可追溯的分支：\n``` bash\n$ git branch --track <new-branch> <remote-branch>\n```\n\n删除本地分支:\n``` bash\n$ git branch -d <branch>\n```\n\n给当前版本打标签：\n``` bash\n$ git tag <tag-name>\n```\n\n## 更新与发布\n列出当前配置的远程端：\n``` bash\n$ git remote -v\n```\n\n显示远程端的信息：\n``` bash\n$ git remote show <remote>\n```\n\n添加新的远程端：\n``` bash\n$ git remote add <remote> <url>\n```\n\n下载远程端版本，但不合并到HEAD中：\n``` bash\n$ git fetch <remote>\n```\n\n下载远程端版本，并自动与HEAD版本合并：\n``` bash\n$ git remote pull <remote> <url>\n```\n\n将远程端版本合并到本地版本中：\n``` bash\n$ git pull origin master\n```\n\n将本地版本发布到远程端：\n``` bash\n$ git push remote <remote> <branch>\n```\n\n删除远程端分支：\n``` bash\n$ git push <remote> :<branch> (since Git v1.5.0)\n或\ngit push <remote> --delete <branch> (since Git v1.7.0)\n```\n\n发布标签:\n``` bash\n$ git push --tags\n```\n\n## 合并与重置\n将分支合并到当前HEAD中：\n``` bash\n$ git merge <branch>\n```\n\n将当前HEAD版本重置到分支中:\n请勿重置已发布的提交!\n``` bash\n$ git rebase <branch>\n```\n\n退出重置:\n``` bash\n$ git rebase --abort\n```\n\n解决冲突后继续重置：\n``` bash\n$ git rebase --continue\n```\n\n使用配置好的merge tool 解决冲突：\n``` bash\n$ git mergetool\n```\n\n在编辑器中手动解决冲突后，标记文件为已解决冲突\n``` bash\n$ git add <resolved-file>\n$ git rm <resolved-file>\n```\n\n## 撤销\n放弃工作目录下的所有修改：\n``` bash\n$ git reset --hard HEAD\n```\n\n移除缓存区的所有文件（i.e. 撤销上次git add）:\n``` bash\n$ git reset HEAD\n```\n\n放弃某个文件的所有本地修改：\n``` bash\n$ git checkout HEAD <file>\n```\n\n重置一个提交（通过创建一个截然不同的新提交）\n``` bash\n$ git revert <commit>\n```\n\n将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：\n``` bash\n$ git reset --hard <commit>\n```\n\n将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：\n``` bash\n$ git reset <commit>\n```\n\n将HEAD重置到上一次提交的版本，并保留未提交的本地修改：\n``` bash\n$ git reset --keep <commit>\n```\n","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git 的安装和使用\ndate: 2016-07-14 10:46:06\ntags: Git\ncategory: 前端\n---\nGit 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。\n<!--more-->\n## 安装\n在windows下安装git比较常用的有以下几种方式：\n* [Git 官方版本的安装](http://git-scm.com/download/win)\n* [GitHub for Windows](https://desktop.github.com/)\n* [TortoiseGit  1.8.12.0-64](http://cdn.github.cheris.com.cn/file/git/TortoiseGit-1.8.12.0-64bit.msi)(点击直接下载)\n* [TortoiseGit-LanguagePack-zh_CN  1.8.12.0-64](http://cdn.github.cheris.com.cn/file/git/TortoiseGit-LanguagePack-1.8.12.0-64bit-zh_CN.msi)(点击直接下载)\n\n## 配置\n当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：\n``` bash\n git config --global user.name \"username\"\n$ git config --global user.email \"username@example.com\"\n```\n对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:\n1. 在GitHub右上方点击你的头像，选择”Settings”；\n2. 在右边的”Personal settings”侧边栏选择”Emails”；\n3. 选择”Keep my email address private”。\n\n这样，你就可以使用如下格式的email进行配置：\n``` bash\n$ git config --global user.email \"username@users.noreply.github.com\"\n```\n\n![git速查表](http://cdn.github.cheris.com.cn/images/github/20140730150425_610.jpg) \n![git常用命令](http://cdn.github.cheris.com.cn/images/github/git%E9%80%9F%E6%9F%A5%E8%A1%A8.png)\n## 创建\n复制一个已创建的仓库:\n``` bash\n$ git clone git@github.com:example/example.github.io.git\n```\n\n创建一个新的本地仓库:\n``` bash\n$ git init\n```\n\n## 本地修改\n显示工作路径下已修改的文件：\n``` bash\n$ git status\n```\n\n显示与上次提交版本文件的不同：\n``` bash\n$ git diff\n```\n\n把当前所有修改添加到下次提交中：\n``` bash\n$ git add\n```\n\n把对某个文件的修改添加到下次提交中：\n``` bash\n$ git add -p <file>\n```\n\n提交本地的所有修改：\n``` bash\n$ git commit -a\n```\n\n提交之前已标记的变化：\n``` bash\n$ git commit\n```\n\n附加消息提交：\n``` bash\n$ git commit -m 'message here'\n```\n\n提交，并将提交时间设置为之前的某个日期:\n``` bash\ngit commit --date=\"`date --date='n day ago'`\" -am \"Commit Message\"\n```\n\n修改上次提交\n请勿修改已发布的提交记录!\n``` bash\n$ git commit --amend\n```\n\n把当前分支中未提交的修改移动到其他分支\n``` bash\ngit stash\ngit checkout branch2\ngit stash pop\n```\n## 搜索\n从当前目录的所有文件中查找文本内容：\n``` bash\n$ git grep \"Hello\"\n```\n\n在某一版本中搜索文本：\n``` bash\n$ git grep \"Hello\" v2.5\n```\n\n## 提交历史\n从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：\n``` bash\n$ git log\n```\n\n显示所有提交（仅显示提交的hash和message）：\n``` bash\n$ git log --oneline\n```\n\n显示某个用户的所有提交：\n``` bash\n$ git log --author=\"username\"\n```\n\n显示某个文件的所有修改：\n``` bash\n$ git log -p <file>\n```\n\n谁，在什么时间，修改了文件的什么内容：\n``` bash\n$ git blame <file>\n```\n\n#分支与标签\n列出所有的分支：\n``` bash\n$ git branch\n```\n\n切换分支：\n``` bash\n$ git checkout <branch>\n```\n\n创建并切换到新分支:\n``` bash\n$ git checkout -b <branch>\n```\n\n基于当前分支创建新分支：\n``` bash\n$ git branch <new-branch>\n```\n\n基于远程分支创建新的可追溯的分支：\n``` bash\n$ git branch --track <new-branch> <remote-branch>\n```\n\n删除本地分支:\n``` bash\n$ git branch -d <branch>\n```\n\n给当前版本打标签：\n``` bash\n$ git tag <tag-name>\n```\n\n## 更新与发布\n列出当前配置的远程端：\n``` bash\n$ git remote -v\n```\n\n显示远程端的信息：\n``` bash\n$ git remote show <remote>\n```\n\n添加新的远程端：\n``` bash\n$ git remote add <remote> <url>\n```\n\n下载远程端版本，但不合并到HEAD中：\n``` bash\n$ git fetch <remote>\n```\n\n下载远程端版本，并自动与HEAD版本合并：\n``` bash\n$ git remote pull <remote> <url>\n```\n\n将远程端版本合并到本地版本中：\n``` bash\n$ git pull origin master\n```\n\n将本地版本发布到远程端：\n``` bash\n$ git push remote <remote> <branch>\n```\n\n删除远程端分支：\n``` bash\n$ git push <remote> :<branch> (since Git v1.5.0)\n或\ngit push <remote> --delete <branch> (since Git v1.7.0)\n```\n\n发布标签:\n``` bash\n$ git push --tags\n```\n\n## 合并与重置\n将分支合并到当前HEAD中：\n``` bash\n$ git merge <branch>\n```\n\n将当前HEAD版本重置到分支中:\n请勿重置已发布的提交!\n``` bash\n$ git rebase <branch>\n```\n\n退出重置:\n``` bash\n$ git rebase --abort\n```\n\n解决冲突后继续重置：\n``` bash\n$ git rebase --continue\n```\n\n使用配置好的merge tool 解决冲突：\n``` bash\n$ git mergetool\n```\n\n在编辑器中手动解决冲突后，标记文件为已解决冲突\n``` bash\n$ git add <resolved-file>\n$ git rm <resolved-file>\n```\n\n## 撤销\n放弃工作目录下的所有修改：\n``` bash\n$ git reset --hard HEAD\n```\n\n移除缓存区的所有文件（i.e. 撤销上次git add）:\n``` bash\n$ git reset HEAD\n```\n\n放弃某个文件的所有本地修改：\n``` bash\n$ git checkout HEAD <file>\n```\n\n重置一个提交（通过创建一个截然不同的新提交）\n``` bash\n$ git revert <commit>\n```\n\n将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：\n``` bash\n$ git reset --hard <commit>\n```\n\n将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：\n``` bash\n$ git reset <commit>\n```\n\n将HEAD重置到上一次提交的版本，并保留未提交的本地修改：\n``` bash\n$ git reset --keep <commit>\n```\n","slug":"Git常用命令","published":1,"updated":"2016-07-14T03:20:55.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqm2wana0004o0ob7vjel43x","content":"<p>Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在windows下安装git比较常用的有以下几种方式：</p>\n<ul>\n<li><a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">Git 官方版本的安装</a></li>\n<li><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"external\">GitHub for Windows</a></li>\n<li><a href=\"http://cdn.github.cheris.com.cn/file/git/TortoiseGit-1.8.12.0-64bit.msi\" target=\"_blank\" rel=\"external\">TortoiseGit  1.8.12.0-64</a>(点击直接下载)</li>\n<li><a href=\"http://cdn.github.cheris.com.cn/file/git/TortoiseGit-LanguagePack-1.8.12.0-64bit-zh_CN.msi\" target=\"_blank\" rel=\"external\">TortoiseGit-LanguagePack-zh_CN  1.8.12.0-64</a>(点击直接下载)</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> git config --global user.name <span class=\"string\">\"username\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"username@example.com\"</span></div></pre></td></tr></table></figure></p>\n<p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p>\n<ol>\n<li>在GitHub右上方点击你的头像，选择”Settings”；</li>\n<li>在右边的”Personal settings”侧边栏选择”Emails”；</li>\n<li>选择”Keep my email address private”。</li>\n</ol>\n<p>这样，你就可以使用如下格式的email进行配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email <span class=\"string\">\"username@users.noreply.github.com\"</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://cdn.github.cheris.com.cn/images/github/20140730150425_610.jpg\" alt=\"git速查表\"><br><img src=\"http://cdn.github.cheris.com.cn/images/github/git%E9%80%9F%E6%9F%A5%E8%A1%A8.png\" alt=\"git常用命令\"></p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>复制一个已创建的仓库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:example/example.github.io.git</div></pre></td></tr></table></figure></p>\n<p>创建一个新的本地仓库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<h2 id=\"本地修改\"><a href=\"#本地修改\" class=\"headerlink\" title=\"本地修改\"></a>本地修改</h2><p>显示工作路径下已修改的文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure></p>\n<p>显示与上次提交版本文件的不同：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure></p>\n<p>把当前所有修改添加到下次提交中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add</div></pre></td></tr></table></figure></p>\n<p>把对某个文件的修改添加到下次提交中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -p &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>提交本地的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>提交之前已标记的变化：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit</div></pre></td></tr></table></figure></p>\n<p>附加消息提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">'message here'</span></div></pre></td></tr></table></figure></p>\n<p>提交，并将提交时间设置为之前的某个日期:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --date=<span class=\"string\">\"`date --date='n day ago'`\"</span> -am <span class=\"string\">\"Commit Message\"</span></div></pre></td></tr></table></figure></p>\n<p>修改上次提交<br>请勿修改已发布的提交记录!<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure></p>\n<p>把当前分支中未提交的修改移动到其他分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div><div class=\"line\">git checkout branch2</div><div class=\"line\">git stash pop</div></pre></td></tr></table></figure></p>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>从当前目录的所有文件中查找文本内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git grep <span class=\"string\">\"Hello\"</span></div></pre></td></tr></table></figure></p>\n<p>在某一版本中搜索文本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git grep <span class=\"string\">\"Hello\"</span> v2.5</div></pre></td></tr></table></figure></p>\n<h2 id=\"提交历史\"><a href=\"#提交历史\" class=\"headerlink\" title=\"提交历史\"></a>提交历史</h2><p>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span></div></pre></td></tr></table></figure></p>\n<p>显示所有提交（仅显示提交的hash和message）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --oneline</div></pre></td></tr></table></figure></p>\n<p>显示某个用户的所有提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"username\"</span></div></pre></td></tr></table></figure></p>\n<p>显示某个文件的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -p &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>谁，在什么时间，修改了文件的什么内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git blame &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>#分支与标签<br>列出所有的分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>切换分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>创建并切换到新分支:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>基于当前分支创建新分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch &lt;new-branch&gt;</div></pre></td></tr></table></figure></p>\n<p>基于远程分支创建新的可追溯的分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;</div></pre></td></tr></table></figure></p>\n<p>删除本地分支:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>给当前版本打标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git tag &lt;tag-name&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"更新与发布\"><a href=\"#更新与发布\" class=\"headerlink\" title=\"更新与发布\"></a>更新与发布</h2><p>列出当前配置的远程端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div></pre></td></tr></table></figure></p>\n<p>显示远程端的信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote show &lt;remote&gt;</div></pre></td></tr></table></figure></p>\n<p>添加新的远程端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add &lt;remote&gt; &lt;url&gt;</div></pre></td></tr></table></figure></p>\n<p>下载远程端版本，但不合并到HEAD中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch &lt;remote&gt;</div></pre></td></tr></table></figure></p>\n<p>下载远程端版本，并自动与HEAD版本合并：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote pull &lt;remote&gt; &lt;url&gt;</div></pre></td></tr></table></figure></p>\n<p>将远程端版本合并到本地版本中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div></pre></td></tr></table></figure></p>\n<p>将本地版本发布到远程端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push remote &lt;remote&gt; &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>删除远程端分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</div><div class=\"line\">或</div><div class=\"line\">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</div></pre></td></tr></table></figure></p>\n<p>发布标签:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push --tags</div></pre></td></tr></table></figure></p>\n<h2 id=\"合并与重置\"><a href=\"#合并与重置\" class=\"headerlink\" title=\"合并与重置\"></a>合并与重置</h2><p>将分支合并到当前HEAD中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>将当前HEAD版本重置到分支中:<br>请勿重置已发布的提交!<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>退出重置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase --abort</div></pre></td></tr></table></figure></p>\n<p>解决冲突后继续重置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase --continue</div></pre></td></tr></table></figure></p>\n<p>使用配置好的merge tool 解决冲突：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div></pre></td></tr></table></figure></p>\n<p>在编辑器中手动解决冲突后，标记文件为已解决冲突<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add &lt;resolved-file&gt;</div><div class=\"line\">$ git rm &lt;resolved-file&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><p>放弃工作目录下的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard HEAD</div></pre></td></tr></table></figure></p>\n<p>移除缓存区的所有文件（i.e. 撤销上次git add）:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD</div></pre></td></tr></table></figure></p>\n<p>放弃某个文件的所有本地修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout HEAD &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>重置一个提交（通过创建一个截然不同的新提交）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<p>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<p>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<p>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --keep &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。<br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在windows下安装git比较常用的有以下几种方式：</p>\n<ul>\n<li><a href=\"http://git-scm.com/download/win\">Git 官方版本的安装</a></li>\n<li><a href=\"https://desktop.github.com/\">GitHub for Windows</a></li>\n<li><a href=\"http://cdn.github.cheris.com.cn/file/git/TortoiseGit-1.8.12.0-64bit.msi\">TortoiseGit  1.8.12.0-64</a>(点击直接下载)</li>\n<li><a href=\"http://cdn.github.cheris.com.cn/file/git/TortoiseGit-LanguagePack-1.8.12.0-64bit-zh_CN.msi\">TortoiseGit-LanguagePack-zh_CN  1.8.12.0-64</a>(点击直接下载)</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> git config --global user.name <span class=\"string\">\"username\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"username@example.com\"</span></div></pre></td></tr></table></figure></p>\n<p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p>\n<ol>\n<li>在GitHub右上方点击你的头像，选择”Settings”；</li>\n<li>在右边的”Personal settings”侧边栏选择”Emails”；</li>\n<li>选择”Keep my email address private”。</li>\n</ol>\n<p>这样，你就可以使用如下格式的email进行配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email <span class=\"string\">\"username@users.noreply.github.com\"</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://cdn.github.cheris.com.cn/images/github/20140730150425_610.jpg\" alt=\"git速查表\"><br><img src=\"http://cdn.github.cheris.com.cn/images/github/git%E9%80%9F%E6%9F%A5%E8%A1%A8.png\" alt=\"git常用命令\"></p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>复制一个已创建的仓库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:example/example.github.io.git</div></pre></td></tr></table></figure></p>\n<p>创建一个新的本地仓库:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<h2 id=\"本地修改\"><a href=\"#本地修改\" class=\"headerlink\" title=\"本地修改\"></a>本地修改</h2><p>显示工作路径下已修改的文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure></p>\n<p>显示与上次提交版本文件的不同：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure></p>\n<p>把当前所有修改添加到下次提交中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add</div></pre></td></tr></table></figure></p>\n<p>把对某个文件的修改添加到下次提交中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -p &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>提交本地的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>提交之前已标记的变化：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit</div></pre></td></tr></table></figure></p>\n<p>附加消息提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">'message here'</span></div></pre></td></tr></table></figure></p>\n<p>提交，并将提交时间设置为之前的某个日期:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --date=<span class=\"string\">\"`date --date='n day ago'`\"</span> -am <span class=\"string\">\"Commit Message\"</span></div></pre></td></tr></table></figure></p>\n<p>修改上次提交<br>请勿修改已发布的提交记录!<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure></p>\n<p>把当前分支中未提交的修改移动到其他分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div><div class=\"line\">git checkout branch2</div><div class=\"line\">git stash pop</div></pre></td></tr></table></figure></p>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>从当前目录的所有文件中查找文本内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git grep <span class=\"string\">\"Hello\"</span></div></pre></td></tr></table></figure></p>\n<p>在某一版本中搜索文本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git grep <span class=\"string\">\"Hello\"</span> v2.5</div></pre></td></tr></table></figure></p>\n<h2 id=\"提交历史\"><a href=\"#提交历史\" class=\"headerlink\" title=\"提交历史\"></a>提交历史</h2><p>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span></div></pre></td></tr></table></figure></p>\n<p>显示所有提交（仅显示提交的hash和message）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --oneline</div></pre></td></tr></table></figure></p>\n<p>显示某个用户的所有提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"username\"</span></div></pre></td></tr></table></figure></p>\n<p>显示某个文件的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -p &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>谁，在什么时间，修改了文件的什么内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git blame &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>#分支与标签<br>列出所有的分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure></p>\n<p>切换分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>创建并切换到新分支:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>基于当前分支创建新分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch &lt;new-branch&gt;</div></pre></td></tr></table></figure></p>\n<p>基于远程分支创建新的可追溯的分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;</div></pre></td></tr></table></figure></p>\n<p>删除本地分支:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>给当前版本打标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git tag &lt;tag-name&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"更新与发布\"><a href=\"#更新与发布\" class=\"headerlink\" title=\"更新与发布\"></a>更新与发布</h2><p>列出当前配置的远程端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div></pre></td></tr></table></figure></p>\n<p>显示远程端的信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote show &lt;remote&gt;</div></pre></td></tr></table></figure></p>\n<p>添加新的远程端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add &lt;remote&gt; &lt;url&gt;</div></pre></td></tr></table></figure></p>\n<p>下载远程端版本，但不合并到HEAD中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch &lt;remote&gt;</div></pre></td></tr></table></figure></p>\n<p>下载远程端版本，并自动与HEAD版本合并：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote pull &lt;remote&gt; &lt;url&gt;</div></pre></td></tr></table></figure></p>\n<p>将远程端版本合并到本地版本中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin master</div></pre></td></tr></table></figure></p>\n<p>将本地版本发布到远程端：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push remote &lt;remote&gt; &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>删除远程端分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</div><div class=\"line\">或</div><div class=\"line\">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</div></pre></td></tr></table></figure></p>\n<p>发布标签:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push --tags</div></pre></td></tr></table></figure></p>\n<h2 id=\"合并与重置\"><a href=\"#合并与重置\" class=\"headerlink\" title=\"合并与重置\"></a>合并与重置</h2><p>将分支合并到当前HEAD中：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>将当前HEAD版本重置到分支中:<br>请勿重置已发布的提交!<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase &lt;branch&gt;</div></pre></td></tr></table></figure></p>\n<p>退出重置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase --abort</div></pre></td></tr></table></figure></p>\n<p>解决冲突后继续重置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase --continue</div></pre></td></tr></table></figure></p>\n<p>使用配置好的merge tool 解决冲突：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div></pre></td></tr></table></figure></p>\n<p>在编辑器中手动解决冲突后，标记文件为已解决冲突<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add &lt;resolved-file&gt;</div><div class=\"line\">$ git rm &lt;resolved-file&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><p>放弃工作目录下的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard HEAD</div></pre></td></tr></table></figure></p>\n<p>移除缓存区的所有文件（i.e. 撤销上次git add）:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD</div></pre></td></tr></table></figure></p>\n<p>放弃某个文件的所有本地修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout HEAD &lt;file&gt;</div></pre></td></tr></table></figure></p>\n<p>重置一个提交（通过创建一个截然不同的新提交）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git revert &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<p>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<p>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset &lt;commit&gt;</div></pre></td></tr></table></figure></p>\n<p>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --keep &lt;commit&gt;</div></pre></td></tr></table></figure></p>"},{"title":"搭建一个Hexo 博客","date":"2016-07-13T08:06:16.000Z","_content":"博客使用 Github + Hexo 实现并托管整个网站\n<!--more-->\nHexo 是一个优秀的静态博客生成器。至于怎么怎么好，这里就不在啰嗦了。\n\n## 准备工作\n* [Git](https://git-scm.com/book/zh/v2)\n* [Github](https://github.com/)\n* [Github Pages](https://pages.github.com/)\n* [nodejs](http://nodejs.org/)\n* [Hexo](https://hexo.io/)\n\n## 安装Hexo\n安装前确保电脑上已经安装：[nodejs](http://nodejs.org/)、[Git](https://git-scm.com/book/zh/v2)。\n使用npm 安装Hexo\n\n```\n$ npm install -g hexo-cli\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n可以在项目目录下看到如下结构的文件：\n\n```\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n打开_config.yml文件，你就可以配置自己的博客了。[官方文档](https://hexo.io/docs/configuration.html)\n站点配置用到两个文件，一个是对整站的配置 hexo\\_config.yml ，另一个是对主题的配置 hexo\\themes\\config.yml 。\nhexo\\_config.yml 文件如下：\n\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site 这里的配置，哪项配置反映在哪里，可以参考我的博客\ntitle: Xiaomiya's blog #站点名，站点左上角\nsubtitle: Walk steps step by step #副标题，站点左上角\ndescription: Walk steps step by step #给搜索引擎看的，对站点的描述，可以自定义\nauthor: xiaomiya#在站点左下角可以看到\nemail: #你的联系邮箱\nlanguage: zh-CN #中国人嘛，用中文\n\n# URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\n\n# Writing 文章布局、写作格式的定义，不修改\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nmax_open_file: 100\nfilename_case: 0\nhighlight:\n  enable: true\n  backtick_code_block: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server 不修改\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: false\nlogger_format:\n\n# Date / Time format 日期格式，不修改\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination 每页显示文章数，可以自定义，我将10改成了5\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus Disqus插件，我们会替换成“多说”，不修改\ndisqus_shortname:\n\n# Extensions 这里配置站点所用主题和插件，暂默认，后面会介绍怎么修改\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\ntheme: light\nexclude_generator:\nplugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n\n# Deployment 站点部署到github要配置，上一节中已经讲过\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: https://github.com/xiaomiya/xiaomiya.github.com.git\n  branch: master\n```\n\n  现在可以 hexo generate ， hexo server ，打开 localhost:4000 查看效果了。\n\n\nhexo\\themes\\config.yml\n\n```\nmenu: #站点右上角导航栏，暂时默认，后面介绍修改\n  首页: /\n  存档: /archives\n  关于: /about\n  ToDo: /todolist\n  \n\nwidgets: #站点右边栏，暂时默认，后面介绍修改和添加\n- search\n- category\n- tagcloud\n- weibo\n- blogroll\n\n\nexcerpt_link: 阅读全文 #替换为中文\n\nplugins: \n\n\ntwitter: #右边栏要显示twitter展示的话，需要在此设置\n  username: moxie198\n  show_replies: false\n  tweet_count: 5\n\naddthis: #SNS分享，身在天朝，当然用“百度分享”，暂时默认，后面会介绍\n  enable: true\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: true\n\nfancybox: true #图片效果，默认\n\ngoogle_analytics: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍\nrss:  #生成RSS，需要配置路径，暂时默认，后面介绍\n```\n为了能够使Hexo部署到GitHub上，需要安装一个插件：(在执行 hexo deploy 后,出现 error deployer not found:github 的错误也是这个原因。)\n\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n下面是一些常用命令\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n```\n常用复合命令：\n\n```\nhexo deploy -g\nhexo server -g\n```\n\n简写：\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","source":"_posts/搭建一个Hexo博客.md","raw":"---\ntitle: 搭建一个Hexo 博客\ndate: 2016-07-13 16:06:16\ntags: Hexo\ncategory: 前端\n---\n博客使用 Github + Hexo 实现并托管整个网站\n<!--more-->\nHexo 是一个优秀的静态博客生成器。至于怎么怎么好，这里就不在啰嗦了。\n\n## 准备工作\n* [Git](https://git-scm.com/book/zh/v2)\n* [Github](https://github.com/)\n* [Github Pages](https://pages.github.com/)\n* [nodejs](http://nodejs.org/)\n* [Hexo](https://hexo.io/)\n\n## 安装Hexo\n安装前确保电脑上已经安装：[nodejs](http://nodejs.org/)、[Git](https://git-scm.com/book/zh/v2)。\n使用npm 安装Hexo\n\n```\n$ npm install -g hexo-cli\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n可以在项目目录下看到如下结构的文件：\n\n```\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n打开_config.yml文件，你就可以配置自己的博客了。[官方文档](https://hexo.io/docs/configuration.html)\n站点配置用到两个文件，一个是对整站的配置 hexo\\_config.yml ，另一个是对主题的配置 hexo\\themes\\config.yml 。\nhexo\\_config.yml 文件如下：\n\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site 这里的配置，哪项配置反映在哪里，可以参考我的博客\ntitle: Xiaomiya's blog #站点名，站点左上角\nsubtitle: Walk steps step by step #副标题，站点左上角\ndescription: Walk steps step by step #给搜索引擎看的，对站点的描述，可以自定义\nauthor: xiaomiya#在站点左下角可以看到\nemail: #你的联系邮箱\nlanguage: zh-CN #中国人嘛，用中文\n\n# URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\n\n# Writing 文章布局、写作格式的定义，不修改\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nmax_open_file: 100\nfilename_case: 0\nhighlight:\n  enable: true\n  backtick_code_block: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server 不修改\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: false\nlogger_format:\n\n# Date / Time format 日期格式，不修改\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination 每页显示文章数，可以自定义，我将10改成了5\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus Disqus插件，我们会替换成“多说”，不修改\ndisqus_shortname:\n\n# Extensions 这里配置站点所用主题和插件，暂默认，后面会介绍怎么修改\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\ntheme: light\nexclude_generator:\nplugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n\n# Deployment 站点部署到github要配置，上一节中已经讲过\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: https://github.com/xiaomiya/xiaomiya.github.com.git\n  branch: master\n```\n\n  现在可以 hexo generate ， hexo server ，打开 localhost:4000 查看效果了。\n\n\nhexo\\themes\\config.yml\n\n```\nmenu: #站点右上角导航栏，暂时默认，后面介绍修改\n  首页: /\n  存档: /archives\n  关于: /about\n  ToDo: /todolist\n  \n\nwidgets: #站点右边栏，暂时默认，后面介绍修改和添加\n- search\n- category\n- tagcloud\n- weibo\n- blogroll\n\n\nexcerpt_link: 阅读全文 #替换为中文\n\nplugins: \n\n\ntwitter: #右边栏要显示twitter展示的话，需要在此设置\n  username: moxie198\n  show_replies: false\n  tweet_count: 5\n\naddthis: #SNS分享，身在天朝，当然用“百度分享”，暂时默认，后面会介绍\n  enable: true\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: true\n\nfancybox: true #图片效果，默认\n\ngoogle_analytics: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍\nrss:  #生成RSS，需要配置路径，暂时默认，后面介绍\n```\n为了能够使Hexo部署到GitHub上，需要安装一个插件：(在执行 hexo deploy 后,出现 error deployer not found:github 的错误也是这个原因。)\n\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n下面是一些常用命令\n```\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\n```\n常用复合命令：\n\n```\nhexo deploy -g\nhexo server -g\n```\n\n简写：\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","slug":"搭建一个Hexo博客","published":1,"updated":"2016-07-14T03:20:55.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqm2wand0005o0oboxmaoawm","content":"<p>博客使用 Github + Hexo 实现并托管整个网站<br><a id=\"more\"></a><br>Hexo 是一个优秀的静态博客生成器。至于怎么怎么好，这里就不在啰嗦了。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a></li>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Pages</a></li>\n<li><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs</a></li>\n<li><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a></li>\n</ul>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>安装前确保电脑上已经安装：<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs</a>、<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Git</a>。<br>使用npm 安装Hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p>可以在项目目录下看到如下结构的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n<p>打开_config.yml文件，你就可以配置自己的博客了。<a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"external\">官方文档</a><br>站点配置用到两个文件，一个是对整站的配置 hexo_config.yml ，另一个是对主题的配置 hexo\\themes\\config.yml 。<br>hexo_config.yml 文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</div><div class=\"line\">## Source: https://github.com/tommy351/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site 这里的配置，哪项配置反映在哪里，可以参考我的博客</div><div class=\"line\">title: Xiaomiya&apos;s blog #站点名，站点左上角</div><div class=\"line\">subtitle: Walk steps step by step #副标题，站点左上角</div><div class=\"line\">description: Walk steps step by step #给搜索引擎看的，对站点的描述，可以自定义</div><div class=\"line\">author: xiaomiya#在站点左下角可以看到</div><div class=\"line\">email: #你的联系邮箱</div><div class=\"line\">language: zh-CN #中国人嘛，用中文</div><div class=\"line\"></div><div class=\"line\"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\"></div><div class=\"line\"># Writing 文章布局、写作格式的定义，不修改</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">max_open_file: 100</div><div class=\"line\">filename_case: 0</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  backtick_code_block: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</div><div class=\"line\">## 2: Enable pagination</div><div class=\"line\">## 1: Disable pagination</div><div class=\"line\">## 0: Fully Disable</div><div class=\"line\">archive: 1</div><div class=\"line\">category: 1</div><div class=\"line\">tag: 1</div><div class=\"line\"></div><div class=\"line\"># Server 不修改</div><div class=\"line\">## Hexo uses Connect as a server</div><div class=\"line\">## You can customize the logger format as defined in</div><div class=\"line\">## http://www.senchalabs.org/connect/logger.html</div><div class=\"line\">port: 4000</div><div class=\"line\">logger: false</div><div class=\"line\">logger_format:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format 日期格式，不修改</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: MMM D YYYY</div><div class=\"line\">time_format: H:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination 每页显示文章数，可以自定义，我将10改成了5</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 5</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus Disqus插件，我们会替换成“多说”，不修改</div><div class=\"line\">disqus_shortname:</div><div class=\"line\"></div><div class=\"line\"># Extensions 这里配置站点所用主题和插件，暂默认，后面会介绍怎么修改</div><div class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class=\"line\">theme: light</div><div class=\"line\">exclude_generator:</div><div class=\"line\">plugins:</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div><div class=\"line\"></div><div class=\"line\"># Deployment 站点部署到github要配置，上一节中已经讲过</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: https://github.com/xiaomiya/xiaomiya.github.com.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>  现在可以 hexo generate ， hexo server ，打开 localhost:4000 查看效果了。</p>\n<p>hexo\\themes\\config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #站点右上角导航栏，暂时默认，后面介绍修改</div><div class=\"line\">  首页: /</div><div class=\"line\">  存档: /archives</div><div class=\"line\">  关于: /about</div><div class=\"line\">  ToDo: /todolist</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">widgets: #站点右边栏，暂时默认，后面介绍修改和添加</div><div class=\"line\">- search</div><div class=\"line\">- category</div><div class=\"line\">- tagcloud</div><div class=\"line\">- weibo</div><div class=\"line\">- blogroll</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">excerpt_link: 阅读全文 #替换为中文</div><div class=\"line\"></div><div class=\"line\">plugins: </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">twitter: #右边栏要显示twitter展示的话，需要在此设置</div><div class=\"line\">  username: moxie198</div><div class=\"line\">  show_replies: false</div><div class=\"line\">  tweet_count: 5</div><div class=\"line\"></div><div class=\"line\">addthis: #SNS分享，身在天朝，当然用“百度分享”，暂时默认，后面会介绍</div><div class=\"line\">  enable: true</div><div class=\"line\">  pubid:</div><div class=\"line\">  facebook: true</div><div class=\"line\">  twitter: true</div><div class=\"line\">  google: true</div><div class=\"line\">  pinterest: true</div><div class=\"line\"></div><div class=\"line\">fancybox: true #图片效果，默认</div><div class=\"line\"></div><div class=\"line\">google_analytics: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍</div><div class=\"line\">rss:  #生成RSS，需要配置路径，暂时默认，后面介绍</div></pre></td></tr></table></figure>\n<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：(在执行 hexo deploy 后,出现 error deployer not found:github 的错误也是这个原因。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>下面是一些常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">hexo generate #生成静态页面至public目录</div><div class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">hexo deploy #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure></p>\n<p>常用复合命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy -g</div><div class=\"line\">hexo server -g</div></pre></td></tr></table></figure>\n<p>简写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>博客使用 Github + Hexo 实现并托管整个网站<br>","more":"<br>Hexo 是一个优秀的静态博客生成器。至于怎么怎么好，这里就不在啰嗦了。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\">Git</a></li>\n<li><a href=\"https://github.com/\">Github</a></li>\n<li><a href=\"https://pages.github.com/\">Github Pages</a></li>\n<li><a href=\"http://nodejs.org/\">nodejs</a></li>\n<li><a href=\"https://hexo.io/\">Hexo</a></li>\n</ul>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>安装前确保电脑上已经安装：<a href=\"http://nodejs.org/\">nodejs</a>、<a href=\"https://git-scm.com/book/zh/v2\">Git</a>。<br>使用npm 安装Hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<p>可以在项目目录下看到如下结构的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n<p>打开_config.yml文件，你就可以配置自己的博客了。<a href=\"https://hexo.io/docs/configuration.html\">官方文档</a><br>站点配置用到两个文件，一个是对整站的配置 hexo_config.yml ，另一个是对主题的配置 hexo\\themes\\config.yml 。<br>hexo_config.yml 文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</div><div class=\"line\">## Source: https://github.com/tommy351/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site 这里的配置，哪项配置反映在哪里，可以参考我的博客</div><div class=\"line\">title: Xiaomiya&apos;s blog #站点名，站点左上角</div><div class=\"line\">subtitle: Walk steps step by step #副标题，站点左上角</div><div class=\"line\">description: Walk steps step by step #给搜索引擎看的，对站点的描述，可以自定义</div><div class=\"line\">author: xiaomiya#在站点左下角可以看到</div><div class=\"line\">email: #你的联系邮箱</div><div class=\"line\">language: zh-CN #中国人嘛，用中文</div><div class=\"line\"></div><div class=\"line\"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\"></div><div class=\"line\"># Writing 文章布局、写作格式的定义，不修改</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">max_open_file: 100</div><div class=\"line\">filename_case: 0</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  backtick_code_block: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</div><div class=\"line\">## 2: Enable pagination</div><div class=\"line\">## 1: Disable pagination</div><div class=\"line\">## 0: Fully Disable</div><div class=\"line\">archive: 1</div><div class=\"line\">category: 1</div><div class=\"line\">tag: 1</div><div class=\"line\"></div><div class=\"line\"># Server 不修改</div><div class=\"line\">## Hexo uses Connect as a server</div><div class=\"line\">## You can customize the logger format as defined in</div><div class=\"line\">## http://www.senchalabs.org/connect/logger.html</div><div class=\"line\">port: 4000</div><div class=\"line\">logger: false</div><div class=\"line\">logger_format:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format 日期格式，不修改</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: MMM D YYYY</div><div class=\"line\">time_format: H:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination 每页显示文章数，可以自定义，我将10改成了5</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 5</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus Disqus插件，我们会替换成“多说”，不修改</div><div class=\"line\">disqus_shortname:</div><div class=\"line\"></div><div class=\"line\"># Extensions 这里配置站点所用主题和插件，暂默认，后面会介绍怎么修改</div><div class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class=\"line\">theme: light</div><div class=\"line\">exclude_generator:</div><div class=\"line\">plugins:</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div><div class=\"line\"></div><div class=\"line\"># Deployment 站点部署到github要配置，上一节中已经讲过</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: https://github.com/xiaomiya/xiaomiya.github.com.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>  现在可以 hexo generate ， hexo server ，打开 localhost:4000 查看效果了。</p>\n<p>hexo\\themes\\config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #站点右上角导航栏，暂时默认，后面介绍修改</div><div class=\"line\">  首页: /</div><div class=\"line\">  存档: /archives</div><div class=\"line\">  关于: /about</div><div class=\"line\">  ToDo: /todolist</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">widgets: #站点右边栏，暂时默认，后面介绍修改和添加</div><div class=\"line\">- search</div><div class=\"line\">- category</div><div class=\"line\">- tagcloud</div><div class=\"line\">- weibo</div><div class=\"line\">- blogroll</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">excerpt_link: 阅读全文 #替换为中文</div><div class=\"line\"></div><div class=\"line\">plugins: </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">twitter: #右边栏要显示twitter展示的话，需要在此设置</div><div class=\"line\">  username: moxie198</div><div class=\"line\">  show_replies: false</div><div class=\"line\">  tweet_count: 5</div><div class=\"line\"></div><div class=\"line\">addthis: #SNS分享，身在天朝，当然用“百度分享”，暂时默认，后面会介绍</div><div class=\"line\">  enable: true</div><div class=\"line\">  pubid:</div><div class=\"line\">  facebook: true</div><div class=\"line\">  twitter: true</div><div class=\"line\">  google: true</div><div class=\"line\">  pinterest: true</div><div class=\"line\"></div><div class=\"line\">fancybox: true #图片效果，默认</div><div class=\"line\"></div><div class=\"line\">google_analytics: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍</div><div class=\"line\">rss:  #生成RSS，需要配置路径，暂时默认，后面介绍</div></pre></td></tr></table></figure>\n<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：(在执行 hexo deploy 后,出现 error deployer not found:github 的错误也是这个原因。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>下面是一些常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">hexo generate #生成静态页面至public目录</div><div class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">hexo deploy #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure></p>\n<p>常用复合命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy -g</div><div class=\"line\">hexo server -g</div></pre></td></tr></table></figure>\n<p>简写：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure></p>"},{"title":"The front-end web site to collect","date":"2016-06-11T11:09:08.000Z","_content":"本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。\n<!--more-->\n[coding](https://coding.net/)\n\n[如何写一篇hexo博客](http://www.jianshu.com/p/3c7ddd48bfa9)\n\n","source":"_posts/The front-end web site to collect.md","raw":"---\ntitle: The front-end web site to collect\ndate: 2016-06-11 19:09:08\ntags:\n---\n本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。\n<!--more-->\n[coding](https://coding.net/)\n\n[如何写一篇hexo博客](http://www.jianshu.com/p/3c7ddd48bfa9)\n\n","slug":"The front-end web site to collect","published":1,"updated":"2016-07-14T03:20:55.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqm2wanh0007o0obxlb04bxr","content":"<p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。<br><a id=\"more\"></a><br><a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">coding</a></p>\n<p><a href=\"http://www.jianshu.com/p/3c7ddd48bfa9\" target=\"_blank\" rel=\"external\">如何写一篇hexo博客</a></p>\n","excerpt":"<p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。<br>","more":"<br><a href=\"https://coding.net/\">coding</a></p>\n<p><a href=\"http://www.jianshu.com/p/3c7ddd48bfa9\">如何写一篇hexo博客</a></p>"},{"title":"Hexo 多设备管理","date":"2016-07-13T09:06:16.000Z","_content":"如何在不同设备快速、高效的管理自己的博客？\n<!--more-->\n这里采用分支的方法，在一个Github Pages项目上，实现不同终端的管理工作。\n\n实现原理：\n在项目上创建一个分支，暂定为hexo分支。\nmaster分支和hexo分支互补干扰，当然了，如果你没有操作错误，他们也许永远都不需要 merge\n\n* master 分支 存放线上静态站点\n\n* Hexo 分支 保存项目数据 方便随时随地获取项目 并在本地发布站点 （hexo 分支 是直接发布到master分支上的）。\n\n## 具体操作流程：\n\n1. 创建仓库，example.github.io；\n2. 创建两个分支：master 与 hexo；\n3. 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；\n4. 拷贝仓库到本地；\n```\ngit clone git@github.com:example/example.github.io.git\n```\n4. 在本地 example.github.io 文件夹下通过Git bash(或其他shell)依次执行（此时当前分支应显示为hexo）如下命令;\n```\n$ npm install hexo\n$ hexo init \n$ npm install \n$ npm install hexo-deployer-git\n$ npm install hexo-deployer-git --save\n```\n需要注意的是，npm install hexo之后 git branch 查看当前分支为 hexo 分支，hexo init之后，发现找不到分支了，原因如下：\ngit是通过.git 文件来控制管理的，当在远端仓库clone项目时，项目中默认生成了一个.git 文件，然而操作hexo init 的时候，同样生成了一个.git 文件。\n这样之前生成的.git文件丢失，整个项目就失去版本控制。\n5. 配置hexo 博客\n6. 提交项目文件到hexo 分支，依次执行如下命令：\n```\n$ git add .\n$ git commit -m “…”\n$ git push origin hexo\n```\n7. 执行hexo generate -d生成网站并部署到GitHub上。\n\n\n## 日常维护\n1. 依次执行如下指令将改动推送到GitHub（此时当前分支应为hexo）：\n```\n$ git add .\n$ git commit -m “…”\n$ git push origin hexo\n```\n2. 执行hexo generate -d发布网站到master分支上。\n\n## 更换设备或者本地文件丢失的时候\n1. 拷贝远端仓库（默认分支为hexo）:\n```\ngit clone git@github.com:example/example.github.io.git\n```\n2. 在本地新拷贝的example.github.io文件夹下通过Git bash(或其他shell)依次执行下列指令：\n```\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git\n$ npm install hexo-deployer-git --save\n```\n这里不再需要hexo init这条指令。\n\n## Hexo deploy失败？\n简单说，删掉根目录下的文件夹：.deploy_git，重新deploy就可以了。\n在git提交时，忽略.deploy_git、public文件就好了，其中public是每次hexo g新生成的静态博客文件，不需要同步。\n修改根目录下的.gitignore文件为：\n``` bash\nvim .gitignore\n```\n``` txt\n/.deploy_git\n/public\n```\n\n然后 ‘Esc':wq\n\n\n","source":"_posts/Hexo 多设备管理.md","raw":"---\ntitle: Hexo 多设备管理\ndate: 2016-07-13 17:06:16\ntags: Hexo\ncategory: 前端\n---\n如何在不同设备快速、高效的管理自己的博客？\n<!--more-->\n这里采用分支的方法，在一个Github Pages项目上，实现不同终端的管理工作。\n\n实现原理：\n在项目上创建一个分支，暂定为hexo分支。\nmaster分支和hexo分支互补干扰，当然了，如果你没有操作错误，他们也许永远都不需要 merge\n\n* master 分支 存放线上静态站点\n\n* Hexo 分支 保存项目数据 方便随时随地获取项目 并在本地发布站点 （hexo 分支 是直接发布到master分支上的）。\n\n## 具体操作流程：\n\n1. 创建仓库，example.github.io；\n2. 创建两个分支：master 与 hexo；\n3. 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；\n4. 拷贝仓库到本地；\n```\ngit clone git@github.com:example/example.github.io.git\n```\n4. 在本地 example.github.io 文件夹下通过Git bash(或其他shell)依次执行（此时当前分支应显示为hexo）如下命令;\n```\n$ npm install hexo\n$ hexo init \n$ npm install \n$ npm install hexo-deployer-git\n$ npm install hexo-deployer-git --save\n```\n需要注意的是，npm install hexo之后 git branch 查看当前分支为 hexo 分支，hexo init之后，发现找不到分支了，原因如下：\ngit是通过.git 文件来控制管理的，当在远端仓库clone项目时，项目中默认生成了一个.git 文件，然而操作hexo init 的时候，同样生成了一个.git 文件。\n这样之前生成的.git文件丢失，整个项目就失去版本控制。\n5. 配置hexo 博客\n6. 提交项目文件到hexo 分支，依次执行如下命令：\n```\n$ git add .\n$ git commit -m “…”\n$ git push origin hexo\n```\n7. 执行hexo generate -d生成网站并部署到GitHub上。\n\n\n## 日常维护\n1. 依次执行如下指令将改动推送到GitHub（此时当前分支应为hexo）：\n```\n$ git add .\n$ git commit -m “…”\n$ git push origin hexo\n```\n2. 执行hexo generate -d发布网站到master分支上。\n\n## 更换设备或者本地文件丢失的时候\n1. 拷贝远端仓库（默认分支为hexo）:\n```\ngit clone git@github.com:example/example.github.io.git\n```\n2. 在本地新拷贝的example.github.io文件夹下通过Git bash(或其他shell)依次执行下列指令：\n```\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git\n$ npm install hexo-deployer-git --save\n```\n这里不再需要hexo init这条指令。\n\n## Hexo deploy失败？\n简单说，删掉根目录下的文件夹：.deploy_git，重新deploy就可以了。\n在git提交时，忽略.deploy_git、public文件就好了，其中public是每次hexo g新生成的静态博客文件，不需要同步。\n修改根目录下的.gitignore文件为：\n``` bash\nvim .gitignore\n```\n``` txt\n/.deploy_git\n/public\n```\n\n然后 ‘Esc':wq\n\n\n","slug":"Hexo 多设备管理","published":1,"updated":"2016-07-14T08:45:27.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqm2wank000ao0obwwilzycy","content":"<p>如何在不同设备快速、高效的管理自己的博客？<br><a id=\"more\"></a><br>这里采用分支的方法，在一个Github Pages项目上，实现不同终端的管理工作。</p>\n<p>实现原理：<br>在项目上创建一个分支，暂定为hexo分支。<br>master分支和hexo分支互补干扰，当然了，如果你没有操作错误，他们也许永远都不需要 merge</p>\n<ul>\n<li><p>master 分支 存放线上静态站点</p>\n</li>\n<li><p>Hexo 分支 保存项目数据 方便随时随地获取项目 并在本地发布站点 （hexo 分支 是直接发布到master分支上的）。</p>\n</li>\n</ul>\n<h2 id=\"具体操作流程：\"><a href=\"#具体操作流程：\" class=\"headerlink\" title=\"具体操作流程：\"></a>具体操作流程：</h2><ol>\n<li>创建仓库，example.github.io；</li>\n<li>创建两个分支：master 与 hexo；</li>\n<li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li>\n<li><p>拷贝仓库到本地；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:example/example.github.io.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>在本地 example.github.io 文件夹下通过Git bash(或其他shell)依次执行（此时当前分支应显示为hexo）如下命令;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ hexo init </div><div class=\"line\">$ npm install </div><div class=\"line\">$ npm install hexo-deployer-git</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>需要注意的是，npm install hexo之后 git branch 查看当前分支为 hexo 分支，hexo init之后，发现找不到分支了，原因如下：<br>git是通过.git 文件来控制管理的，当在远端仓库clone项目时，项目中默认生成了一个.git 文件，然而操作hexo init 的时候，同样生成了一个.git 文件。<br>这样之前生成的.git文件丢失，整个项目就失去版本控制。</p>\n<ol>\n<li>配置hexo 博客</li>\n<li><p>提交项目文件到hexo 分支，依次执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m “…”</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行hexo generate -d生成网站并部署到GitHub上。</p>\n</li>\n</ol>\n<h2 id=\"日常维护\"><a href=\"#日常维护\" class=\"headerlink\" title=\"日常维护\"></a>日常维护</h2><ol>\n<li><p>依次执行如下指令将改动推送到GitHub（此时当前分支应为hexo）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m “…”</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行hexo generate -d发布网站到master分支上。</p>\n</li>\n</ol>\n<h2 id=\"更换设备或者本地文件丢失的时候\"><a href=\"#更换设备或者本地文件丢失的时候\" class=\"headerlink\" title=\"更换设备或者本地文件丢失的时候\"></a>更换设备或者本地文件丢失的时候</h2><ol>\n<li><p>拷贝远端仓库（默认分支为hexo）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:example/example.github.io.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>在本地新拷贝的example.github.io文件夹下通过Git bash(或其他shell)依次执行下列指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm install hexo-deployer-git</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里不再需要hexo init这条指令。</p>\n<h2 id=\"Hexo-deploy失败？\"><a href=\"#Hexo-deploy失败？\" class=\"headerlink\" title=\"Hexo deploy失败？\"></a>Hexo deploy失败？</h2><p>简单说，删掉根目录下的文件夹：.deploy_git，重新deploy就可以了。<br>在git提交时，忽略.deploy_git、public文件就好了，其中public是每次hexo g新生成的静态博客文件，不需要同步。<br>修改根目录下的.gitignore文件为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim .gitignore</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n<p>然后 ‘Esc’:wq</p>\n","excerpt":"<p>如何在不同设备快速、高效的管理自己的博客？<br>","more":"<br>这里采用分支的方法，在一个Github Pages项目上，实现不同终端的管理工作。</p>\n<p>实现原理：<br>在项目上创建一个分支，暂定为hexo分支。<br>master分支和hexo分支互补干扰，当然了，如果你没有操作错误，他们也许永远都不需要 merge</p>\n<ul>\n<li><p>master 分支 存放线上静态站点</p>\n</li>\n<li><p>Hexo 分支 保存项目数据 方便随时随地获取项目 并在本地发布站点 （hexo 分支 是直接发布到master分支上的）。</p>\n</li>\n</ul>\n<h2 id=\"具体操作流程：\"><a href=\"#具体操作流程：\" class=\"headerlink\" title=\"具体操作流程：\"></a>具体操作流程：</h2><ol>\n<li>创建仓库，example.github.io；</li>\n<li>创建两个分支：master 与 hexo；</li>\n<li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li>\n<li><p>拷贝仓库到本地；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:example/example.github.io.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>在本地 example.github.io 文件夹下通过Git bash(或其他shell)依次执行（此时当前分支应显示为hexo）如下命令;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ hexo init </div><div class=\"line\">$ npm install </div><div class=\"line\">$ npm install hexo-deployer-git</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>需要注意的是，npm install hexo之后 git branch 查看当前分支为 hexo 分支，hexo init之后，发现找不到分支了，原因如下：<br>git是通过.git 文件来控制管理的，当在远端仓库clone项目时，项目中默认生成了一个.git 文件，然而操作hexo init 的时候，同样生成了一个.git 文件。<br>这样之前生成的.git文件丢失，整个项目就失去版本控制。</p>\n<ol>\n<li>配置hexo 博客</li>\n<li><p>提交项目文件到hexo 分支，依次执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m “…”</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行hexo generate -d生成网站并部署到GitHub上。</p>\n</li>\n</ol>\n<h2 id=\"日常维护\"><a href=\"#日常维护\" class=\"headerlink\" title=\"日常维护\"></a>日常维护</h2><ol>\n<li><p>依次执行如下指令将改动推送到GitHub（此时当前分支应为hexo）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m “…”</div><div class=\"line\">$ git push origin hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行hexo generate -d发布网站到master分支上。</p>\n</li>\n</ol>\n<h2 id=\"更换设备或者本地文件丢失的时候\"><a href=\"#更换设备或者本地文件丢失的时候\" class=\"headerlink\" title=\"更换设备或者本地文件丢失的时候\"></a>更换设备或者本地文件丢失的时候</h2><ol>\n<li><p>拷贝远端仓库（默认分支为hexo）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:example/example.github.io.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>在本地新拷贝的example.github.io文件夹下通过Git bash(或其他shell)依次执行下列指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm install hexo-deployer-git</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里不再需要hexo init这条指令。</p>\n<h2 id=\"Hexo-deploy失败？\"><a href=\"#Hexo-deploy失败？\" class=\"headerlink\" title=\"Hexo deploy失败？\"></a>Hexo deploy失败？</h2><p>简单说，删掉根目录下的文件夹：.deploy_git，重新deploy就可以了。<br>在git提交时，忽略.deploy_git、public文件就好了，其中public是每次hexo g新生成的静态博客文件，不需要同步。<br>修改根目录下的.gitignore文件为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim .gitignore</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public</div></pre></td></tr></table></figure>\n<p>然后 ‘Esc’:wq</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciqm2wand0005o0oboxmaoawm","category_id":"ciqm2wan90003o0obir8mwkgb","_id":"ciqm2wanm000bo0obf077cbwz"},{"post_id":"ciqm2wan10000o0obd2lk5nwh","category_id":"ciqm2wan90003o0obir8mwkgb","_id":"ciqm2wanp000eo0ob720clfvw"},{"post_id":"ciqm2wank000ao0obwwilzycy","category_id":"ciqm2wan90003o0obir8mwkgb","_id":"ciqm2wanp000go0obrmnkmj5l"},{"post_id":"ciqm2wan50001o0objn03ppme","category_id":"ciqm2wan90003o0obir8mwkgb","_id":"ciqm2wanq000io0obp3248cmd"},{"post_id":"ciqm2wana0004o0ob7vjel43x","category_id":"ciqm2wan90003o0obir8mwkgb","_id":"ciqm2wanr000ko0obslmo7l5x"}],"PostTag":[{"post_id":"ciqm2wan10000o0obd2lk5nwh","tag_id":"ciqm2wan70002o0ob87ij95p0","_id":"ciqm2wank0009o0ob0q6odf6h"},{"post_id":"ciqm2wan50001o0objn03ppme","tag_id":"ciqm2wanh0006o0obvd0gtxh1","_id":"ciqm2wanp000fo0obdox2fgem"},{"post_id":"ciqm2wana0004o0ob7vjel43x","tag_id":"ciqm2wan70002o0ob87ij95p0","_id":"ciqm2wanr000jo0ob89gl2znv"},{"post_id":"ciqm2wand0005o0oboxmaoawm","tag_id":"ciqm2wanp000ho0obx1k080x5","_id":"ciqm2wans000mo0ob5cpw49wz"},{"post_id":"ciqm2wank000ao0obwwilzycy","tag_id":"ciqm2wanp000ho0obx1k080x5","_id":"ciqm2wans000no0ob9ny5p4qx"}],"Tag":[{"name":"Git","_id":"ciqm2wan70002o0ob87ij95p0"},{"name":"Gulp","_id":"ciqm2wanh0006o0obvd0gtxh1"},{"name":"Hexo","_id":"ciqm2wanp000ho0obx1k080x5"}]}}